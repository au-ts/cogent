include <gum/common/repeat.cogent>

log2stop: StopF (U64, U64) U64
log2stop #{acc, obsv} =
    let (a, b) = acc
    in a >= obsv

log2step: StepF (U64, U64) U64
log2step #{acc, obsv} = 
    let (a, b) = acc
    in (a * 2, b + 1)

mylog2: U64 -> U64
mylog2 n =
    let args = #{n = n, stop = log2stop, step = log2step, acc = (1, 0), obsv = n}
    and (a, b) = repeat args
    in b

expstop: StopF U32 U32
expstop x = False

expstep: StepF U32 U32
expstep #{acc, obsv} = acc * obsv

myexp: (U32, U32) -> U32
myexp (a, b) =
    let args = #{n = upcast b, stop = expstop, step = expstep, acc = 1, obsv = a}
    in repeat args

searchNext : StepF (U32, U32, Bool) (WordArray U32, U32)
searchNext #{acc, obsv} =
    let (l, r, b) = acc
    and (arr, v) = obsv
    and m = l + (r - l) / 2
    and args = #{arr = arr, idx = m, val = 0}
    and x = wordarray_get args
    in 
        if | x < v -> (m + 1, r, b)
           | x > v -> (l, m, b) 
           | else -> (m, r, True)

searchStop : StopF (U32, U32, Bool) (WordArray U32, U32)
searchStop #{acc, obsv} =
    let (l, r, b) = acc
    in 
        if | b -> True
           | l >= r -> True
           | else -> False

binarySearch : ((WordArray U32)!, U32) -> U32
binarySearch (arr, v) =
	let len = wordarray_length arr
	and args = #{n = upcast len, stop = searchStop, step = searchNext, acc = (0, len, False), obsv = (arr, v)}
	and (l, r, b) = repeat args
	in
		if | b -> l
		   | else -> len

wordarray_get_opt32 : WordArrayGetOP U32 -> Opt U32
wordarray_get_opt32 args = wordarray_get_opt args

wordarray_put32 : WordArrayPutP U32 -> WordArray U32
wordarray_put32 args = wordarray_put args

type WordArray a

{-# cinline wordarray_length #-}
{-# fnmacro wordarray_length #-}
wordarray_length: all(a :< DSE). (WordArray a)! -> U32

type WordArrayGetP a = #{arr: (WordArray a)!, idx: U32, val: a}

{-# cinline wordarray_get #-}
{-# fnmacro wordarray_get #-}
wordarray_get: all(a :< DSE). WordArrayGetP a -> a

type WordArrayPutP a = #{arr: WordArray a, idx: U32, val: a}

{-# cinline wordarray_put #-}
{-# fnmacro wordarray_put2 #-}
wordarray_put: all(a :< DSE). WordArrayPutP a -> WordArray a

type Opt a = < Nothing | Something a >
type WordArrayGetOP a = #{arr: (WordArray a)!, idx: U32}

{-# cinline wordarray_get_opt #-}
{-# fnmacro wordarray_get_opt #-}
wordarray_get_opt: all(a :< DSE). WordArrayGetOP a -> Opt a

