(*
This file is generated by Cogent

*)

theory Generated_TypeProof
imports "Cogent.TypeProofGen"
"Cogent.AssocLookup"
begin

definition
  abbreviatedType1 :: " Cogent.type"
where
  "abbreviatedType1 \<equiv> TRecord [(''f1'', (TPrim Bool, Present)), (''f2'', (TCon ''U2'' [] Unboxed, Present)), (''f3'', (TCon ''U4'' [] Unboxed, Present))] (Boxed Writable (Some (LayRecord [(''f1'', LayBitRange (Suc 0, 0)), (''f2'', LayBitRange (2, Suc 0)), (''f3'', LayBitRange (4, 4))])))"

lemmas abbreviated_type_defs =
  abbreviatedType1_def

definition
  u4_to_u8_type :: " poly_type"
where
  "u4_to_u8_type \<equiv> (0, [], {}, TCon ''U4'' [] Unboxed, TPrim (Num U8))"

definition
  u8_to_u4_type :: " poly_type"
where
  "u8_to_u4_type \<equiv> (0, [], {}, TPrim (Num U8), TCon ''U4'' [] Unboxed)"

definition
  u2_to_u8_type :: " poly_type"
where
  "u2_to_u8_type \<equiv> (0, [], {}, TCon ''U2'' [] Unboxed, TPrim (Num U8))"

definition
  u8_to_u2_type :: " poly_type"
where
  "u8_to_u2_type \<equiv> (0, [], {}, TPrim (Num U8), TCon ''U2'' [] Unboxed)"

definition
  id4_type :: " poly_type"
where
  "id4_type \<equiv> (0, [], {}, TCon ''U4'' [] (Boxed Writable None), TCon ''U4'' [] (Boxed Writable None))"

definition
  id4 :: "string Cogent.expr"
where
  "id4 \<equiv> Let (Var 0) (Var 0)"

definition
  id2_type :: " poly_type"
where
  "id2_type \<equiv> (0, [], {}, TCon ''U2'' [] (Boxed Writable None), TCon ''U2'' [] (Boxed Writable None))"

definition
  id2 :: "string Cogent.expr"
where
  "id2 \<equiv> Let (Var 0) (Var 0)"

definition
  foo_type :: " poly_type"
where
  "foo_type \<equiv> (0, [], {}, abbreviatedType1, abbreviatedType1)"

definition
  foo :: "string Cogent.expr"
where
  "foo \<equiv> Let (Var 0) (LetBang (set [0]) (Member (Var 0) 0) (If (Var 0) (LetBang (set [1]) (Let (Member (Var 1) 2) (Let (App (AFun ''u4_to_u8'' [] []) (Var 0)) (Let (Lit (LU8 12)) (Let (Prim (BitAnd U8) [Var 1, Var 0]) (App (AFun ''u8_to_u4'' [] []) (Var 0)))))) (Put (Var 2) 2 (Var 0))) (LetBang (set [1]) (Let (Member (Var 1) 1) (Let (App (AFun ''u2_to_u8'' [] []) (Var 0)) (Let (Lit (LU8 1)) (Let (Prim (Plus U8) [Var 1, Var 0]) (App (AFun ''u8_to_u2'' [] []) (Var 0)))))) (Put (Var 2) 1 (Var 0)))))"

ML \<open>
val Cogent_functions = ["id4", "id2", "foo"]
val Cogent_abstract_functions = ["u4_to_u8", "u8_to_u4", "u2_to_u8", "u8_to_u2"]
\<close>

definition
  \<Xi> :: " string \<Rightarrow>  poly_type"
where
  "\<Xi> \<equiv> assoc_lookup [(''u4_to_u8'', u4_to_u8_type), (''u8_to_u4'', u8_to_u4_type), (''u2_to_u8'', u2_to_u8_type), (''u8_to_u2'', u8_to_u2_type), (''id4'', id4_type), (''id2'', id2_type), (''foo'', foo_type)] (0, [], {}, TUnit, TUnit)"

definition
  "\<xi> \<equiv> assoc_lookup [(''u4_to_u8'', (\<lambda>_ _. False)), (''u8_to_u4'', (\<lambda>_ _. False)), (''u2_to_u8'', (\<lambda>_ _. False)), (''u8_to_u2'', (\<lambda>_ _. False))]"

definition
  "id4_typetree \<equiv> TyTrSplit (Cons (Some TSK_L) []) [] TyTrLeaf [Some (TCon ''U4'' [] (Boxed Writable None))] TyTrLeaf"

definition
  "id2_typetree \<equiv> TyTrSplit (Cons (Some TSK_L) []) [] TyTrLeaf [Some (TCon ''U2'' [] (Boxed Writable None))] TyTrLeaf"

definition
  "foo_typetree \<equiv> TyTrSplit (Cons (Some TSK_L) []) [] TyTrLeaf [Some abbreviatedType1] (TyTrSplit (Cons (Some TSK_NS) (Cons None [])) [] TyTrLeaf [Some (TPrim Bool)] (TyTrSplit (Cons (Some TSK_L) (Cons (Some TSK_R) (Cons None []))) [] TyTrLeaf [] (TyTrSplit (Cons None (Cons (Some TSK_S) (Cons None []))) [] (TyTrSplit (Cons None (Cons (Some TSK_NS) (Cons None []))) [] (TyTrSplit (Cons None (Cons (Some TSK_L) (Cons None []))) [] TyTrLeaf [Some (TCon ''U4'' [] Unboxed)] (TyTrSplit (Cons (Some TSK_L) (append (replicate 3 None) [])) [] TyTrLeaf [Some (TPrim (Num U8))] (TyTrSplit (Cons (Some TSK_R) (append (replicate 4 None) [])) [] TyTrLeaf [Some (TPrim (Num U8))] (TyTrSplit (Cons (Some TSK_L) (Cons (Some TSK_L) (append (replicate 4 None) []))) [] TyTrLeaf [Some (TPrim (Num U8))] TyTrLeaf)))) [Some (TCon ''U4'' [] Unboxed)] TyTrLeaf) [] (TyTrSplit (Cons None (Cons (Some TSK_NS) (Cons None []))) [] (TyTrSplit (Cons None (Cons (Some TSK_L) (Cons None []))) [] TyTrLeaf [Some (TCon ''U2'' [] Unboxed)] (TyTrSplit (Cons (Some TSK_L) (append (replicate 3 None) [])) [] TyTrLeaf [Some (TPrim (Num U8))] (TyTrSplit (Cons (Some TSK_R) (append (replicate 4 None) [])) [] TyTrLeaf [Some (TPrim (Num U8))] (TyTrSplit (Cons (Some TSK_L) (Cons (Some TSK_L) (append (replicate 4 None) []))) [] TyTrLeaf [Some (TPrim (Num U8))] TyTrLeaf)))) [Some (TCon ''U2'' [] Unboxed)] TyTrLeaf))))"

ML \<open> open TTyping_Tactics \<close>

ML_quiet \<open>
val typing_helper_1_script : tac list = [
(ForceTac @{thms kinding_def kinding_all_def kinding_variant_def kinding_record_def matches_fields_layout_def upt_def match_repr_layout_simps match_constraint_def})
] \<close>


lemma typing_helper_1[unfolded abbreviated_type_defs] :
  "kinding 0 [] {} (TCon ''U4'' [] (Boxed Writable None)) {E}"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_1_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_2_script : tac list = [
(ForceTac @{thms kinding_def kinding_all_def kinding_variant_def kinding_record_def matches_fields_layout_def upt_def match_repr_layout_simps match_constraint_def})
] \<close>


lemma typing_helper_2[unfolded abbreviated_type_defs] :
  "kinding 0 [] {} (TCon ''U2'' [] (Boxed Writable None)) {E}"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_2_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_3_script : tac list = [
(ForceTac @{thms kinding_def kinding_all_def kinding_variant_def kinding_record_def matches_fields_layout_def upt_def match_repr_layout_simps match_constraint_def})
] \<close>


lemma typing_helper_3[unfolded abbreviated_type_defs] :
  "kinding 0 [] {} abbreviatedType1 {E}"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_3_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_4_script : tac list = [
(ForceTac @{thms kinding_def kinding_all_def kinding_variant_def kinding_record_def matches_fields_layout_def upt_def match_repr_layout_simps match_constraint_def})
] \<close>


lemma typing_helper_4[unfolded abbreviated_type_defs] :
  "kinding 0 [] {} (TRecord [(''f1'', (TPrim Bool, Present)), (''f2'', (TCon ''U2'' [] Unboxed, Present)), (''f3'', (TCon ''U4'' [] Unboxed, Present))] (Boxed ReadOnly (Some (LayRecord [(''f1'', LayBitRange (Suc 0, 0)), (''f2'', LayBitRange (2, Suc 0)), (''f3'', LayBitRange (4, 4))])))) {S, D}"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_4_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_5_script : tac list = [
(ForceTac @{thms kinding_def kinding_all_def kinding_variant_def kinding_record_def matches_fields_layout_def upt_def match_repr_layout_simps match_constraint_def})
] \<close>


lemma typing_helper_5[unfolded abbreviated_type_defs] :
  "kinding 0 [] {} (TPrim Bool) {E, S, D}"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_5_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_6_script : tac list = [
(ForceTac @{thms kinding_def kinding_all_def kinding_variant_def kinding_record_def matches_fields_layout_def upt_def match_repr_layout_simps match_constraint_def})
] \<close>


lemma typing_helper_6[unfolded abbreviated_type_defs] :
  "kinding 0 [] {} (TCon ''U4'' [] Unboxed) {E, S, D}"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_6_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_7_script : tac list = [
(ForceTac @{thms kinding_def kinding_all_def kinding_variant_def kinding_record_def matches_fields_layout_def upt_def match_repr_layout_simps match_constraint_def})
] \<close>


lemma typing_helper_7[unfolded abbreviated_type_defs] :
  "kinding 0 [] {} (TPrim (Num U8)) {E, S, D}"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_7_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_8_script : tac list = [
(ForceTac @{thms matches_fields_layout_def upt_def match_repr_layout_simps match_constraint_def})
] \<close>


lemma typing_helper_8[unfolded abbreviated_type_defs] :
  "type_wellformed 0 0 {} (TCon ''U4'' [] Unboxed)"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_8_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_9_script : tac list = [
(RTac @{thm typing_subst}),
(SimpSolveTac ([],[])),
(SimpTac ([],[(nth @{thms HOL.simp_thms} (25-1)),(nth @{thms HOL.simp_thms} (26-1))]))
] \<close>


lemma typing_helper_9[unfolded abbreviated_type_defs] :
  "subst_wellformed 0 [] {} [] [] 0 [] {}"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_9_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_10_script : tac list = [
(ForceTac @{thms matches_fields_layout_def upt_def match_repr_layout_simps match_constraint_def})
] \<close>


lemma typing_helper_10[unfolded abbreviated_type_defs] :
  "type_wellformed 0 0 {} (TFun (TCon ''U4'' [] Unboxed) (TPrim (Num U8)))"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_10_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_11_script : tac list = [
(ForceTac @{thms matches_fields_layout_def upt_def match_repr_layout_simps match_constraint_def})
] \<close>


lemma typing_helper_11[unfolded abbreviated_type_defs] :
  "type_wellformed 0 0 {} (TPrim (Num U8))"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_11_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_12_script : tac list = [
(ForceTac @{thms matches_fields_layout_def upt_def match_repr_layout_simps match_constraint_def})
] \<close>


lemma typing_helper_12[unfolded abbreviated_type_defs] :
  "type_wellformed 0 0 {} (TFun (TPrim (Num U8)) (TCon ''U4'' [] Unboxed))"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_12_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_13_script : tac list = [
(ForceTac @{thms matches_fields_layout_def upt_def match_repr_layout_simps match_constraint_def})
] \<close>


lemma typing_helper_13[unfolded abbreviated_type_defs] :
  "type_wellformed 0 0 {} abbreviatedType1"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_13_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_14_script : tac list = [
(ForceTac @{thms kinding_def kinding_all_def kinding_variant_def kinding_record_def matches_fields_layout_def upt_def match_repr_layout_simps match_constraint_def})
] \<close>


lemma typing_helper_14[unfolded abbreviated_type_defs] :
  "kinding 0 [] {} (TCon ''U2'' [] Unboxed) {E, S, D}"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_14_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_15_script : tac list = [
(ForceTac @{thms matches_fields_layout_def upt_def match_repr_layout_simps match_constraint_def})
] \<close>


lemma typing_helper_15[unfolded abbreviated_type_defs] :
  "type_wellformed 0 0 {} (TCon ''U2'' [] Unboxed)"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_15_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_16_script : tac list = [
(ForceTac @{thms matches_fields_layout_def upt_def match_repr_layout_simps match_constraint_def})
] \<close>


lemma typing_helper_16[unfolded abbreviated_type_defs] :
  "type_wellformed 0 0 {} (TFun (TCon ''U2'' [] Unboxed) (TPrim (Num U8)))"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_16_script |> EVERY \<close>)
  done

ML_quiet \<open>
val typing_helper_17_script : tac list = [
(ForceTac @{thms matches_fields_layout_def upt_def match_repr_layout_simps match_constraint_def})
] \<close>


lemma typing_helper_17[unfolded abbreviated_type_defs] :
  "type_wellformed 0 0 {} (TFun (TPrim (Num U8)) (TCon ''U2'' [] Unboxed))"
  apply (unfold abbreviated_type_defs)?
  apply (tactic \<open> map (fn t => DETERM (interpret_tac t @{context} 1)) typing_helper_17_script |> EVERY \<close>)
  done

ML_quiet \<open>
val id4_typecorrect_script : hints treestep list = [
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_1})]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_1})]),
StepUp,
Val (TypingTacs []),
Val (TypingTacs []),
StepUp,
StepUp
] \<close>


ML_quiet \<open>
val id4_ttyping_details_future = get_all_typing_details_future false @{context} "id4"
   id4_typecorrect_script
\<close>


lemma id4_typecorrect :
  "\<Xi>, prod.fst id4_type, prod.fst (prod.snd id4_type), prod.fst (prod.snd (prod.snd id4_type)), (id4_typetree, [Some (prod.fst (prod.snd (prod.snd (prod.snd id4_type))))]) T\<turnstile> id4 : prod.snd (prod.snd (prod.snd (prod.snd id4_type)))"
  apply (tactic \<open> resolve_future_typecorrect @{context} id4_ttyping_details_future \<close>)
  done

ML_quiet \<open>
val id2_typecorrect_script : hints treestep list = [
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_2})]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_2})]),
StepUp,
Val (TypingTacs []),
Val (TypingTacs []),
StepUp,
StepUp
] \<close>


ML_quiet \<open>
val id2_ttyping_details_future = get_all_typing_details_future false @{context} "id2"
   id2_typecorrect_script
\<close>


lemma id2_typecorrect :
  "\<Xi>, prod.fst id2_type, prod.fst (prod.snd id2_type), prod.fst (prod.snd (prod.snd id2_type)), (id2_typetree, [Some (prod.fst (prod.snd (prod.snd (prod.snd id2_type))))]) T\<turnstile> id2 : prod.snd (prod.snd (prod.snd (prod.snd id2_type)))"
  apply (tactic \<open> resolve_future_typecorrect @{context} id2_ttyping_details_future \<close>)
  done

ML_quiet \<open>
val foo_typecorrect_script : hints treestep list = [
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_3})]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_3})]),
StepUp,
Val (TypingTacs []),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_4})]),
StepUp,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_5})]),
StepUp,
Val (TypingTacs [(RTac @{thm typing_member}),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_4}]),(SimpSolveTac ([],[])),(RTac @{thm typing_helper_4}),(SimpSolveTac ([],[])),(SimpSolveTac ([],[])),(SimpSolveTac ([],[]))]),
StepDown,
Val (TypingTacs []),
StepDown,
StepUp,
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_4})]),
StepUp,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_6})]),
StepUp,
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_6})]),
StepUp,
Val (TypingTacs [(RTac @{thm typing_member}),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_4}]),(SimpSolveTac ([],[])),(RTac @{thm typing_helper_4}),(SimpSolveTac ([],[])),(SimpSolveTac ([],[])),(SimpSolveTac ([],[]))]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_7})]),
StepUp,
Val (TypingTacs [(RTac @{thm typing_app}),(SplitsTac [SOME [(RTac @{thm split_comp.right}),(RTac @{thm type_wellformed_prettyI}),(SimpTac ([],@{thms type_wellformed.simps})),(RTac @{thm typing_helper_8})],NONE]),(RTac @{thm typing_afun'}),(SimpTac ([@{thm \<Xi>_def},@{thm u4_to_u8_type_def[unfolded abbreviated_type_defs]}],[])),(RTac @{thm typing_helper_9}),(SimpSolveTac ([],[])),(SimpSolveTac ([],[])),(RTac @{thm type_wellformed_prettyI}),(SimpTac ([],@{thms type_wellformed.simps})),(RTac @{thm typing_helper_10}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac []),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_6}]),(SimpSolveTac ([],[]))]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_7})]),
StepUp,
Val (TypingTacs [(RTac @{thm typing_lit'}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac []),(SimpSolveTac ([],[]))]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_7})]),
StepUp,
Val (TypingTacs []),
Val (TypingTacs [(RTac @{thm typing_app}),(SplitsTac [SOME [(RTac @{thm split_comp.right}),(RTac @{thm type_wellformed_prettyI}),(SimpTac ([],@{thms type_wellformed.simps})),(RTac @{thm typing_helper_11})],NONE]),(RTac @{thm typing_afun'}),(SimpTac ([@{thm \<Xi>_def},@{thm u8_to_u4_type_def[unfolded abbreviated_type_defs]}],[])),(RTac @{thm typing_helper_9}),(SimpSolveTac ([],[])),(SimpSolveTac ([],[])),(RTac @{thm type_wellformed_prettyI}),(SimpTac ([],@{thms type_wellformed.simps})),(RTac @{thm typing_helper_12}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac []),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_7}]),(SimpSolveTac ([],[]))]),
StepUp,
StepUp,
StepUp,
StepUp,
Val (TypingTacs [(RTac @{thm typing_put'}),(SplitsTac [SOME [(RTac @{thm split_comp.right}),(RTac @{thm type_wellformed_prettyI}),(SimpTac ([],@{thms type_wellformed.simps})),(RTac @{thm typing_helper_8})],NONE,SOME [(RTac @{thm split_comp.left}),(RTac @{thm type_wellformed_prettyI}),(SimpTac ([],@{thms type_wellformed.simps})),(RTac @{thm typing_helper_13})],NONE]),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_3}]),(SimpSolveTac ([],[])),(SimpSolveTac ([],[])),(SimpSolveTac ([],[])),(SimpSolveTac ([],[@{thm Product_Type.prod.inject}])),(RTac @{thm typing_helper_6}),(SimpSolveTac ([],[])),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_6}]),(SimpSolveTac ([],[])),(SimpSolveTac ([],[]))]),
Val (KindingTacs [(RTac @{thm typing_helper_6})]),
StepUp,
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_4})]),
StepUp,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_14})]),
StepUp,
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_14})]),
StepUp,
Val (TypingTacs [(RTac @{thm typing_member}),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_4}]),(SimpSolveTac ([],[])),(RTac @{thm typing_helper_4}),(SimpSolveTac ([],[])),(SimpSolveTac ([],[])),(SimpSolveTac ([],[]))]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_7})]),
StepUp,
Val (TypingTacs [(RTac @{thm typing_app}),(SplitsTac [SOME [(RTac @{thm split_comp.right}),(RTac @{thm type_wellformed_prettyI}),(SimpTac ([],@{thms type_wellformed.simps})),(RTac @{thm typing_helper_15})],NONE]),(RTac @{thm typing_afun'}),(SimpTac ([@{thm \<Xi>_def},@{thm u2_to_u8_type_def[unfolded abbreviated_type_defs]}],[])),(RTac @{thm typing_helper_9}),(SimpSolveTac ([],[])),(SimpSolveTac ([],[])),(RTac @{thm type_wellformed_prettyI}),(SimpTac ([],@{thms type_wellformed.simps})),(RTac @{thm typing_helper_16}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac []),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_14}]),(SimpSolveTac ([],[]))]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_7})]),
StepUp,
Val (TypingTacs [(RTac @{thm typing_lit'}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac []),(SimpSolveTac ([],[]))]),
StepDown,
StepDown,
Val (KindingTacs [(RTac @{thm typing_helper_7})]),
StepUp,
Val (TypingTacs []),
Val (TypingTacs [(RTac @{thm typing_app}),(SplitsTac [SOME [(RTac @{thm split_comp.right}),(RTac @{thm type_wellformed_prettyI}),(SimpTac ([],@{thms type_wellformed.simps})),(RTac @{thm typing_helper_11})],NONE]),(RTac @{thm typing_afun'}),(SimpTac ([@{thm \<Xi>_def},@{thm u8_to_u2_type_def[unfolded abbreviated_type_defs]}],[])),(RTac @{thm typing_helper_9}),(SimpSolveTac ([],[])),(SimpSolveTac ([],[])),(RTac @{thm type_wellformed_prettyI}),(SimpTac ([],@{thms type_wellformed.simps})),(RTac @{thm typing_helper_17}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac []),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_7}]),(SimpSolveTac ([],[]))]),
StepUp,
StepUp,
StepUp,
StepUp,
Val (TypingTacs [(RTac @{thm typing_put'}),(SplitsTac [SOME [(RTac @{thm split_comp.right}),(RTac @{thm type_wellformed_prettyI}),(SimpTac ([],@{thms type_wellformed.simps})),(RTac @{thm typing_helper_15})],NONE,SOME [(RTac @{thm split_comp.left}),(RTac @{thm type_wellformed_prettyI}),(SimpTac ([],@{thms type_wellformed.simps})),(RTac @{thm typing_helper_13})],NONE]),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_3}]),(SimpSolveTac ([],[])),(SimpSolveTac ([],[])),(SimpSolveTac ([],[])),(SimpSolveTac ([],[@{thm Product_Type.prod.inject}])),(RTac @{thm typing_helper_14}),(SimpSolveTac ([],[])),(RTac @{thm typing_var}),(SimpTac ([@{thm empty_def}],[])),(WeakeningTac [@{thm typing_helper_14}]),(SimpSolveTac ([],[])),(SimpSolveTac ([],[]))]),
Val (KindingTacs [(RTac @{thm typing_helper_14})]),
StepUp,
StepUp,
Val (KindingTacs [(RTac @{thm typing_helper_5})]),
StepUp,
StepUp,
StepUp
] \<close>


ML_quiet \<open>
val foo_ttyping_details_future = get_all_typing_details_future false @{context} "foo"
   foo_typecorrect_script
\<close>


lemma foo_typecorrect :
  "\<Xi>, prod.fst foo_type, prod.fst (prod.snd foo_type), prod.fst (prod.snd (prod.snd foo_type)), (foo_typetree, [Some (prod.fst (prod.snd (prod.snd (prod.snd foo_type))))]) T\<turnstile> foo : prod.snd (prod.snd (prod.snd (prod.snd foo_type)))"
  apply (tactic \<open> resolve_future_typecorrect @{context} foo_ttyping_details_future \<close>)
  done

ML_quiet \<open>
val (_, id4_typing_tree, id4_typing_bucket)
= Future.join id4_ttyping_details_future
\<close>


ML_quiet \<open>
val (_, id2_typing_tree, id2_typing_bucket)
= Future.join id2_ttyping_details_future
\<close>


ML_quiet \<open>
val (_, foo_typing_tree, foo_typing_bucket)
= Future.join foo_ttyping_details_future
\<close>


end
