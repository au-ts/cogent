-- A fourth (slightly modified) version of the minimal C example:
-- brutal.c We use abstract functions to hide the pointer arithmetic and
-- iteration required by the example. The rest of the example can be
-- expressed in Cogent.  We have restricted the provided interface to
-- only those functions essential for the example.

include <gum/common/common.cogent>
include <gum/common/iterator.cogent>

-- Helper types which may be relevant for more examples.

-- An abstract type which only permits reading the underlying value. We
-- can use this wrapper on primitive values which we do not want the
-- Cogent programmer to modify.
type Length

-- An abstract type with no functions
type Start

unwrap : #Length -> U64

-- The main Buffer interface (WIP)

type Vector -- The "Buffer" type

-- We split a vector/buffer into two:
--
--  * BItem enumerates the initialised portion of a buffer;
--     - points to the start of the region.
--  * BTail maintains the uninitalised portion of the buffer
--     - points to the start and carries the length of the region.
type BItem
type BTail = #{ -- need the layout of the tail so we can pass-by-value.
  head : Start,
  length : #Length
}

-- The main abstract function for buffers. We can decompose a buffer
-- into its constituent parts, an item and a tail object.
-- Given a function which operates on the item and tail we can
-- internally call this function to modify the provided buffer.
focus_buffer : all (a,b).(Vector, b!,
                   #{ obj : (BItem, BTail), obsv : b!} -> (a, BItem, BTail)) ->
  (a, Vector)

-- Start BItem & BTail interface functions.

-- Retrieve the next item given both the current item and the tail. This
-- function should return the next item on success (Some), or the given
-- item if it is the last initialised item.
next : (BItem, BTail!) -> <None BItem | Some BItem>

-- Retrieve the read-only contents for the given item.
read : (BItem!) -> Entry!

-- Add a new entry to the beginning of the free region of the buffer.
-- If the tail does not have sufficient space for the entry, or some
-- other error occurred, return the unmodified tail. On success, the new
-- starting location for the uninitialised portion of the buffer is
-- returned.
-- NB: Not implemented in favour of the next abstract function.
--append : (BTail, Entry) -> <Failure BTail | Success BTail>

-- Alternative method of creating a new entry which does not rely on
-- external allocation. Given the tail and a size in bytes, the
-- initialisation function provided is given an entry of the specified
-- size. It is an error if the function is given a size which is larger
-- than the remaining space in the buffer.

-- This function currently provides the initialisation function with a
-- zero-ed Entry object. Whilst this is mostly likely not sound, in the
-- future this type signature will be modified once we support concrete
-- variable-size structures such as Entry. Instead of a zero-ed object,
-- we provide an object with all the relevant fields taken so the client
-- is forced to initialise them.
--
append_in_place : all (a,b).(BTail, U64, a!, (#{ e : Entry , obsv : a! } -> (b, Entry))) ->
  <Failure BTail | Success (b, BTail)>

-- End of BItem & BTail interface functions.

-- Example-specific types and definitions.

-- The data we wish to retrieve.
type Stuff = {
  a : U32,
  b : U32,
  c : U32
}

-- Entries are abstract for now but we hope to bring in their definition
-- into Cogent eventually. The issues are: their length is variable and
-- they have a "flexible array member" as the final struct field,
-- meaning the array has fixed but unknown size.
type Entry

-- An abstract type for naked character pointers.
type CString

-- Create a new entry with the provided name and stuff.
set_entry : (Entry, #Stuff, CString!) -> Entry

-- Return the size of an Entry structure (variable)
get_size : (Entry!) -> U64

-- Retrieve the entry's name as
get_name : (Entry!) -> CString!

-- Retrieve read-only stuff from a read-only entry.
get_stuff : (Entry!) -> Stuff!

-- Test for string equality
cstring_eq : (CString!, CString!) -> Bool

-- Here follows the general iteration scheme in Cogent.

-- Given the current item, we may generate the next item,
-- if any, and yield to the consumer. Otherwise, we are finished.
--
gen_next_item : #{ acc : (BItem, BTail, Bool) , obsv : CString! } ->
  GeneratorResult () U32 () (BItem, BTail, Bool)
gen_next_item (r { acc = (item, tail, exit) }) =
  next (item, tail) !tail
  | None item -> ((item, tail, exit), Stop ())
  | Some item -> ((item, tail, exit), Yield ())

-- We need this helper because we cannot compute this inline; binding
-- !-typed expressions is not prohibited by let-!.
--
item_eq_name : (BItem!, CString!) -> Bool
item_eq_name (item, name) =
 let e = read item in
 cstring_eq(name, get_name e)

item_get_stuff_b : (BItem!) -> U32
item_get_stuff_b item = let e = read item in
  let stuff = get_stuff e in stuff.b

new_entry_helper : #{ e : Entry , obsv : BItem! } -> ((), Entry)
new_entry_helper (r { e = e' , obsv = item }) =
  let e = read item
  and s = get_stuff e
  and stuff = #{ a = s.a, b = s.b + s.b, c = s.c }
  and name = get_name e in
  ((), set_entry (e',stuff,name))

-- During consumption, we determine whether or not the current item is
-- the one we want to query. If so, we create a new entry based on the
-- found entry and continuing consuming until we have found our added
-- entry. Otherwise, we ask for the next item.
--
cons_next_item :
  #{ obj : (), acc : (BItem, BTail, Bool), obsv : CString! } ->
  ConsumerResult U32 () (BItem, BTail, Bool)
cons_next_item (r {acc = (item, tail, exit) , obsv = needle }) =
  if item_eq_name (item, needle) !item then
    if exit then
      let x = item_get_stuff_b item !item in
      ((item,tail,exit), Return x)
    else
      let sz = get_size (read item) !item
      and result = append_in_place (tail,sz,item,new_entry_helper) !item in
      result
      | Failure tail -> ((item,tail,True), Stop ())
      | Success (_,tail) -> ((item,tail,True), Next)
  else ((item,tail,exit), Next)

-- Our main function for item and tail: we iterate using the FFI
-- function which repeatedly calls the consumer followed by the
-- generator until we have completed iteration of all items, or found
-- a matching entry.
--
get_cee : #{obj : (BItem, BTail) , obsv : CString! } ->
             (Option U32, BItem, BTail)
get_cee #{obj = (item, tail) , obsv = needle } =
  let ((item,tail,_), ret) =
     iterate_do [(), U32, (), (BItem, BTail, Bool) , CString!]
                #{ init = ()
                 , gen = gen_next_item
                 , cons = cons_next_item
                 , acc = (item, tail, False)
                 , obsv = needle }
  and res =
    ret
    | Stop () -> None
    | Return x -> Some x
  in (res, item, tail)

-- Main entry function for the Cogent code.
--
findStuff : (Vector, CString!) -> (Vector, Option U32)
findStuff (block, needle) =
  let (res, block) = focus_buffer(block,needle,get_cee)
  in (block, res)
