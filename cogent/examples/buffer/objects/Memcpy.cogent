-- A third stab at translating the minimal C example: brutal.c
-- We use abstract functions to hide the pointer arithmetic and
-- iteration required by the example. The rest of the example can
-- be expressed in Cogent.
--
--
-- We have restricted the provided interface to only those functions
-- essential for the example.

include <gum/common/common.cogent>
include <gum/common/iterator.cogent>

type Vector -- The "Buffer" type

-- We split a vector/buffer into two:
--
--  * BItem enumerates the initialised portion of a buffer;
--  * BTail points to the start of the uninitialised portion.
type BItem
type BTail

-- The main abstract function for buffers. We can decompose a buffer
-- into its constituent parts, an item and a tail object.
-- Given a function which operates on the item and tail we can
-- internally call this function to modify the provided buffer.
focus_buffer : all (a,b).(Vector, b!,
                   #{ obj : (BItem, BTail), obsv : b!} -> (a, BItem, BTail)) ->
  (a, Vector)

-- Start BItem & BTail interface functions.

-- Retrieve the next item given both the current item and the tail. This
-- function should return the next item on success (Some), or the given
-- item if it is the last initialised item.
next : (BItem, BTail!) -> <None BItem | Some BItem>

-- Retrieve the read-only contents for the given item.
read : (BItem!) -> Entry!

-- End of BItem & BTail interface functions.

-- Example-specific types and definitions.

-- The data we wish to retrieve.
type Stuff = {
  a : U32,
  b : U32,
  c : U32
}

-- Entries are abstract for now but we hope to bring in their definition
-- into Cogent eventually. The issues are: their length is variable and
-- they have a "flexible array member" as the final struct field,
-- meaning the array has fixed but unknown size.
type Entry

-- An abstract type for naked character pointers.
type CString

-- Retrieve the entry's name as
get_name : (Entry!) -> CString!

-- Retrieve read-only stuff from a read-only entry.
get_stuff : (Entry!) -> Stuff!

-- Test for string equality
cstring_eq : (CString!, CString!) -> Bool

-- Here follows the general iteration scheme in Cogent.

-- Given the current item, we may generate the next item,
-- if any, and yield to the consumer. Otherwise, we are finished.
--
gen_next_item : #{ acc : BItem , obsv : (BTail!, CString!) } ->
  GeneratorResult () U32 () BItem
gen_next_item (r { acc = item , obsv = (tail, _) }) =
  next (item, tail)
  | None item -> (item, Stop ())
  | Some item -> (item, Yield ())

-- We need this helper because we cannot compute this inline; binding
-- !-typed expressions is not prohibited by let-!.
--
item_eq_name : (BItem!, CString!) -> Bool
item_eq_name (item, name) =
 let e = read item in
 cstring_eq(name, get_name e)

item_get_stuff_b : (BItem!) -> U32
item_get_stuff_b item = let e = read item in
  let stuff = get_stuff e in stuff.b

-- During consumption, we determine whether or not the current item is
-- the one we want to query. If so, we return its stuff. Otherwise, we
-- ask for the next item.
--
cons_next_item :
  #{ obj : (), acc : BItem, obsv : (BTail!, CString!) } ->
  ConsumerResult U32 () BItem
cons_next_item (r {acc = item , obsv = (_, needle) }) =
  if item_eq_name (item, needle) !item then
    let x = item_get_stuff_b item !item in
    (item, Return x)
  else (item, Next)

-- Our main function for item and tail: we iterate using the FFI
-- function which repeatedly calls the consumer followed by the
-- generator until we have completed iteration of all items, or found
-- a matching entry.
--
get_cee : #{obj : (BItem, BTail) , obsv : CString! } ->
             (<None | Some U32>, BItem, BTail)
get_cee #{obj = (item, tail) , obsv = needle } =
  let (item, ret) =
     iterate_do [(), U32, (), BItem, (BTail!, CString!)]
                #{ init = ()
                 , gen = gen_next_item
                 , cons = cons_next_item
                 , acc = item
                 , obsv = (tail, needle) } !tail
  and res =
    ret
    | Stop () -> None
    | Return x -> Some x
  in (res, item, tail)

-- Main entry function for the Cogent code.
--
findStuff : (Vector, CString!) -> (Vector, <None | Some U32>)
findStuff (block, needle) =
  let (res, block) = focus_buffer(block,needle,get_cee)
  in (block, res)
