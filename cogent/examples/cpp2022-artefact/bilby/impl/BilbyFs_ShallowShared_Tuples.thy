(*
This file is generated by Cogent

*)

theory BilbyFs_ShallowShared_Tuples
imports "Cogent.Util"
"CogentShallow.ShallowUtil"
begin

type_synonym 'a WordArray = "'a list"

typedecl 'a View

typedecl  VfsStat

typedecl  VfsMemoryMap

typedecl  VfsInodeAbstract

typedecl  VfsIattr

typedecl  VfsDevice

typedecl  UbiVolInfo

typedecl  UbiVol

typedecl  UbiDevInfo

typedecl  SysState

typedecl  SpinLock

typedecl ('k, 'v) RbtNode

typedecl ('k, 'v) Rbt

typedecl  OSDirContext

typedecl 'a ListNode

typedecl 'a List'

typedecl  LE64

typedecl  LE32

typedecl  LE16

typedecl  BE64

typedecl  BE32

typedecl  BE16

typedecl 'a Array

typedecl 'a AllocPool

record ('a, 'b, 'c) T0 =
  mount_st\<^sub>f :: "'a"
  ostore_st\<^sub>f :: "'b"
  vdir\<^sub>f :: "'c"

record ('a, 'b) T1 =
  ex\<^sub>f :: "'a"
  obj\<^sub>f :: "'b"

record 'a T4 =
  dirctx\<^sub>f :: "'a"

datatype ('a, 'b, 'c) T5 =
  Existing "'a"|
  New "'b"|
  None "'c"

record ('a, 'b) T6 =
  ex\<^sub>f :: "'a"
  inode\<^sub>f :: "'b"

record ('a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j) FsopDoRenameHelperP =
  ex\<^sub>f :: "'a"
  mount_st\<^sub>f :: "'b"
  ostore_st\<^sub>f :: "'c"
  old_dent_size\<^sub>f :: "'d"
  new_dent_size\<^sub>f :: "'e"
  new_o\<^sub>f :: "'f"
  old_o\<^sub>f :: "'g"
  vdir\<^sub>f :: "'h"
  old_vnode\<^sub>f :: "'i"
  opt_new_vnode\<^sub>f :: "'j"

record ('a, 'b, 'c, 'd, 'e) FsopDoRenameHelper1R =
  ex\<^sub>f :: "'a"
  ostore_st\<^sub>f :: "'b"
  vdir\<^sub>f :: "'c"
  old_vnode\<^sub>f :: "'d"
  opt_new_vnode\<^sub>f :: "'e"

record ('a, 'b, 'c, 'd, 'e, 'f, 'g, 'h) FsopDoRenameHelper1P =
  ex\<^sub>f :: "'a"
  mount_st\<^sub>f :: "'b"
  ostore_st\<^sub>f :: "'c"
  dent_size\<^sub>f :: "'d"
  obj\<^sub>f :: "'e"
  vdir\<^sub>f :: "'f"
  old_vnode\<^sub>f :: "'g"
  opt_new_vnode\<^sub>f :: "'h"

record ('a, 'b, 'c, 'd, 'e, 'f) FsopDoMoveHelperRR =
  ex\<^sub>f :: "'a"
  ostore_st\<^sub>f :: "'b"
  old_vdir\<^sub>f :: "'c"
  old_vnode\<^sub>f :: "'d"
  new_vdir\<^sub>f :: "'e"
  opt_new_vnode\<^sub>f :: "'f"

record ('a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k) FsopDoMoveHelperP =
  ex\<^sub>f :: "'a"
  mount_st\<^sub>f :: "'b"
  ostore_st\<^sub>f :: "'c"
  old_dent_size\<^sub>f :: "'d"
  new_dent_size\<^sub>f :: "'e"
  new_o\<^sub>f :: "'f"
  old_o\<^sub>f :: "'g"
  old_vdir\<^sub>f :: "'h"
  old_vnode\<^sub>f :: "'i"
  new_vdir\<^sub>f :: "'j"
  opt_new_vnode\<^sub>f :: "'k"

record ('a, 'b, 'c, 'd, 'e) FsopFillSuperP =
  ex\<^sub>f :: "'a"
  fs_st\<^sub>f :: "'b"
  vsup\<^sub>f :: "'c"
  is_silent\<^sub>f :: "'d"
  root\<^sub>f :: "'e"

record ('a, 'b) FsopFillSuperE =
  err\<^sub>f :: "'a"
  fs_st\<^sub>f :: "'b"

record ('a, 'b, 'c) FsopInitP =
  ex\<^sub>f :: "'a"
  fs_st\<^sub>f :: "'b"
  name\<^sub>f :: "'c"

record ('a, 'b, 'c) FsopFs'E =
  err\<^sub>f :: "'a"
  ex\<^sub>f :: "'b"
  fs_st\<^sub>f :: "'c"

record ('a, 'b, 'c, 'd) ReadDirParams =
  ex\<^sub>f :: "'a"
  fs_st\<^sub>f :: "'b"
  vctx\<^sub>f :: "'c"
  opt_rdctx\<^sub>f :: "'d"

record ('a, 'b, 'c, 'd, 'e, 'f) FsopWriteP =
  ex\<^sub>f :: "'a"
  fs_st\<^sub>f :: "'b"
  vnode\<^sub>f :: "'c"
  pos\<^sub>f :: "'d"
  len\<^sub>f :: "'e"
  addr\<^sub>f :: "'f"

record ('a, 'b, 'c, 'd) FsopVfsInodeE =
  err\<^sub>f :: "'a"
  ex\<^sub>f :: "'b"
  fs_st\<^sub>f :: "'c"
  vnode\<^sub>f :: "'d"

record ('a, 'b, 'c, 'd) FsopTruncateP =
  ex\<^sub>f :: "'a"
  fs_st\<^sub>f :: "'b"
  vnode\<^sub>f :: "'c"
  newsize\<^sub>f :: "'d"

record ('a, 'b, 'c, 'd, 'e) FsopSymlinkRR =
  ex\<^sub>f :: "'a"
  fs_st\<^sub>f :: "'b"
  vdir\<^sub>f :: "'c"
  symname\<^sub>f :: "'d"
  vnode\<^sub>f :: "'e"

record ('a, 'b, 'c, 'd, 'e, 'f) FsopSymlinkP =
  ex\<^sub>f :: "'a"
  fs_st\<^sub>f :: "'b"
  vdir\<^sub>f :: "'c"
  name\<^sub>f :: "'d"
  symname\<^sub>f :: "'e"
  vnode\<^sub>f :: "'f"

record ('a, 'b, 'c, 'd) FsopSetattrP =
  ex\<^sub>f :: "'a"
  fs_st\<^sub>f :: "'b"
  iattr\<^sub>f :: "'c"
  vnode\<^sub>f :: "'d"

record ('a, 'b, 'c, 'd, 'e, 'f, 'g) FsopRenameP =
  ex\<^sub>f :: "'a"
  fs_st\<^sub>f :: "'b"
  vdir\<^sub>f :: "'c"
  old_name\<^sub>f :: "'d"
  old_vnode\<^sub>f :: "'e"
  new_name\<^sub>f :: "'f"
  opt_new_vnode\<^sub>f :: "'g"

record ('a, 'b, 'c, 'd) FsopWriteRR =
  ex\<^sub>f :: "'a"
  fs_st\<^sub>f :: "'b"
  vnode\<^sub>f :: "'c"
  addr\<^sub>f :: "'d"

record ('a, 'b, 'c, 'd, 'e) FsopReadPageP =
  ex\<^sub>f :: "'a"
  fs_st\<^sub>f :: "'b"
  vnode\<^sub>f :: "'c"
  block\<^sub>f :: "'d"
  addr\<^sub>f :: "'e"

record ('a, 'b, 'c, 'd) FsopRR =
  ex\<^sub>f :: "'a"
  fs_st\<^sub>f :: "'b"
  vdir\<^sub>f :: "'c"
  vnode\<^sub>f :: "'d"

record ('a, 'b, 'c, 'd, 'e, 'f, 'g, 'h) FsopMoveP =
  ex\<^sub>f :: "'a"
  fs_st\<^sub>f :: "'b"
  old_vdir\<^sub>f :: "'c"
  old_name\<^sub>f :: "'d"
  old_vnode\<^sub>f :: "'e"
  new_vdir\<^sub>f :: "'f"
  new_name\<^sub>f :: "'g"
  opt_new_vnode\<^sub>f :: "'h"

record ('a, 'b, 'c) FsopLookupRR =
  ex\<^sub>f :: "'a"
  fs_st\<^sub>f :: "'b"
  vdir\<^sub>f :: "'c"

record ('a, 'b, 'c, 'd) FsopLookupP =
  ex\<^sub>f :: "'a"
  fs_st\<^sub>f :: "'b"
  vdir\<^sub>f :: "'c"
  name\<^sub>f :: "'d"

record ('a, 'b, 'c, 'd, 'e) FsopLinkP =
  ex\<^sub>f :: "'a"
  fs_st\<^sub>f :: "'b"
  vdir\<^sub>f :: "'c"
  name\<^sub>f :: "'d"
  vnode\<^sub>f :: "'e"

record ('a, 'b, 'c) FsopIgetRR =
  ex\<^sub>f :: "'a"
  fs_st\<^sub>f :: "'b"
  vnode\<^sub>f :: "'c"

record ('a, 'b, 'c, 'd) FsopIgetP =
  ex\<^sub>f :: "'a"
  fs_st\<^sub>f :: "'b"
  inum\<^sub>f :: "'c"
  vnode\<^sub>f :: "'d"

record ('a, 'b, 'c) FsopGetattrR =
  ex\<^sub>f :: "'a"
  fs_st\<^sub>f :: "'b"
  stat\<^sub>f :: "'c"

record ('a, 'b, 'c, 'd) FsopGetattrP =
  ex\<^sub>f :: "'a"
  fs_st\<^sub>f :: "'b"
  stat\<^sub>f :: "'c"
  vnode\<^sub>f :: "'d"

record ('a, 'b) FsopFsP =
  ex\<^sub>f :: "'a"
  fs_st\<^sub>f :: "'b"

record ('a, 'b, 'c, 'd) FsopFollowLinkP =
  ex\<^sub>f :: "'a"
  fs_st\<^sub>f :: "'b"
  vnode\<^sub>f :: "'c"
  path\<^sub>f :: "'d"

record ('a, 'b, 'c, 'd) FsopDoRenameRR =
  ex\<^sub>f :: "'a"
  fs_st\<^sub>f :: "'b"
  vdir\<^sub>f :: "'c"
  old_vnode\<^sub>f :: "'d"

record ('a, 'b, 'c, 'd, 'e, 'f) FsopDoRenameP =
  ex\<^sub>f :: "'a"
  fs_st\<^sub>f :: "'b"
  vdir\<^sub>f :: "'c"
  old_name\<^sub>f :: "'d"
  old_vnode\<^sub>f :: "'e"
  new_name\<^sub>f :: "'f"

record ('a, 'b, 'c, 'd, 'e) FsopRenameRR =
  ex\<^sub>f :: "'a"
  fs_st\<^sub>f :: "'b"
  vdir\<^sub>f :: "'c"
  old_vnode\<^sub>f :: "'d"
  opt_new_vnode\<^sub>f :: "'e"

record ('a, 'b, 'c, 'd, 'e, 'f, 'g) FsopDoRenameDelP =
  ex\<^sub>f :: "'a"
  fs_st\<^sub>f :: "'b"
  vdir\<^sub>f :: "'c"
  old_name\<^sub>f :: "'d"
  old_vnode\<^sub>f :: "'e"
  new_name\<^sub>f :: "'f"
  new_vnode\<^sub>f :: "'g"

record ('a, 'b, 'c, 'd, 'e) FsopDoMoveRR =
  ex\<^sub>f :: "'a"
  fs_st\<^sub>f :: "'b"
  old_vdir\<^sub>f :: "'c"
  old_vnode\<^sub>f :: "'d"
  new_vdir\<^sub>f :: "'e"

record ('a, 'b, 'c, 'd, 'e, 'f, 'g) FsopDoMoveP =
  ex\<^sub>f :: "'a"
  fs_st\<^sub>f :: "'b"
  old_vdir\<^sub>f :: "'c"
  old_name\<^sub>f :: "'d"
  old_vnode\<^sub>f :: "'e"
  new_vdir\<^sub>f :: "'f"
  new_name\<^sub>f :: "'g"

record ('a, 'b, 'c, 'd, 'e, 'f) FsopMoveRR =
  ex\<^sub>f :: "'a"
  fs_st\<^sub>f :: "'b"
  old_vdir\<^sub>f :: "'c"
  old_vnode\<^sub>f :: "'d"
  new_vdir\<^sub>f :: "'e"
  opt_new_vnode\<^sub>f :: "'f"

record ('a, 'b, 'c, 'd, 'e, 'f, 'g, 'h) FsopDoMoveDelP =
  ex\<^sub>f :: "'a"
  fs_st\<^sub>f :: "'b"
  old_vdir\<^sub>f :: "'c"
  old_name\<^sub>f :: "'d"
  old_vnode\<^sub>f :: "'e"
  new_vdir\<^sub>f :: "'f"
  new_name\<^sub>f :: "'g"
  new_vnode\<^sub>f :: "'h"

record ('a, 'b, 'c, 'd, 'e, 'f) FsopCreateP =
  ex\<^sub>f :: "'a"
  fs_st\<^sub>f :: "'b"
  vdir\<^sub>f :: "'c"
  name\<^sub>f :: "'d"
  mode\<^sub>f :: "'e"
  vnode\<^sub>f :: "'f"

record ('a, 'b, 'c) FsState =
  fsop_st\<^sub>f :: "'a"
  mount_st\<^sub>f :: "'b"
  ostore_st\<^sub>f :: "'c"

record ('a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o) OstoreState =
  next_inum\<^sub>f :: "'a"
  next_sqnum\<^sub>f :: "'b"
  rbuf\<^sub>f :: "'c"
  wbuf_eb\<^sub>f :: "'d"
  wbuf\<^sub>f :: "'e"
  used\<^sub>f :: "'f"
  sync_offs\<^sub>f :: "'g"
  opad\<^sub>f :: "'h"
  pools\<^sub>f :: "'i"
  oaddr\<^sub>f :: "'j"
  fsm_st\<^sub>f :: "'k"
  index_st\<^sub>f :: "'l"
  ubi_vol\<^sub>f :: "'m"
  summary\<^sub>f :: "'n"
  sum_obj\<^sub>f :: "'o"

record ('a, 'b) AllocPools =
  idx\<^sub>f :: "'a"
  gim\<^sub>f :: "'b"

record ('a, 'b, 'c, 'd) AllocPoolUseP =
  pool\<^sub>f :: "'a"
  f\<^sub>f :: "'b"
  acc\<^sub>f :: "'c"
  obsv\<^sub>f :: "'d"

record ('a, 'b, 'c) AllocPoolPreallocP =
  ex\<^sub>f :: "'a"
  pool\<^sub>f :: "'b"
  nb\<^sub>f :: "'c"

record ('a, 'b) ArrA =
  arr\<^sub>f :: "'a"
  acc\<^sub>f :: "'b"

record ('a, 'b) ArrB =
  arr\<^sub>f :: "'a"
  rbrk\<^sub>f :: "'b"

record ('a, 'b, 'c, 'd, 'e, 'f, 'g, 'h) MountState =
  eb_recovery\<^sub>f :: "'a"
  eb_recovery_offs\<^sub>f :: "'b"
  super\<^sub>f :: "'c"
  obj_sup\<^sub>f :: "'d"
  super_offs\<^sub>f :: "'e"
  vol\<^sub>f :: "'f"
  dev\<^sub>f :: "'g"
  no_summary\<^sub>f :: "'h"

record ('a, 'b, 'c, 'd, 'e, 'f, 'g, 'h) Obj =
  magic\<^sub>f :: "'a"
  crc\<^sub>f :: "'b"
  sqnum\<^sub>f :: "'c"
  offs\<^sub>f :: "'d"
  len\<^sub>f :: "'e"
  trans\<^sub>f :: "'f"
  otype\<^sub>f :: "'g"
  ounion\<^sub>f :: "'h"

datatype ('a, 'b, 'c, 'd, 'e, 'f, 'g) ObjUnion =
  TObjData "'a"|
  TObjDel "'b"|
  TObjDentarr "'c"|
  TObjInode "'d"|
  TObjPad "'e"|
  TObjSummary "'f"|
  TObjSuper "'g"

record ('a, 'b) BilbyFsReaddirContext =
  dentarr\<^sub>f :: "'a"
  cur_dentry\<^sub>f :: "'b"

record ('a, 'b, 'c) ObjDentarr =
  id\<^sub>f :: "'a"
  nb_dentry\<^sub>f :: "'b"
  entries\<^sub>f :: "'c"

record ('a, 'b, 'c, 'd, 'e) ArrayReplaceP =
  arr\<^sub>f :: "'a"
  idx\<^sub>f :: "'b"
  elem\<^sub>f :: "'c"
  f\<^sub>f :: "'d"
  ex\<^sub>f :: "'e"

record ('a, 'b, 'c, 'd) ArrayModifyP =
  arr\<^sub>f :: "'a"
  idx\<^sub>f :: "'b"
  f\<^sub>f :: "'c"
  acc\<^sub>f :: "'d"

record ('a, 'b, 'c) ArrayFreeP =
  arr\<^sub>f :: "'a"
  f\<^sub>f :: "'b"
  ex\<^sub>f :: "'c"

record ('a, 'b, 'c, 'd) ArrayFoldP =
  arr\<^sub>f :: "'a"
  f\<^sub>f :: "'b"
  acc\<^sub>f :: "'c"
  obsv\<^sub>f :: "'d"

record ('a, 'b, 'c, 'd, 'e, 'f) WubiLebWriteP =
  ex\<^sub>f :: "'a"
  ubi_vol\<^sub>f :: "'b"
  ebnum\<^sub>f :: "'c"
  robuf\<^sub>f :: "'d"
  buf_offs\<^sub>f :: "'e"
  nb_bytes\<^sub>f :: "'f"

record ('a, 'b, 'c, 'd, 'e, 'f) WubiLebReadP =
  ex\<^sub>f :: "'a"
  ubi_vol\<^sub>f :: "'b"
  ebnum\<^sub>f :: "'c"
  buf\<^sub>f :: "'d"
  buf_offs\<^sub>f :: "'e"
  nb_bytes\<^sub>f :: "'f"

record ('a, 'b, 'c, 'd, 'e) WubiLebChangeP =
  ex\<^sub>f :: "'a"
  ubi_vol\<^sub>f :: "'b"
  ebnum\<^sub>f :: "'c"
  robuf\<^sub>f :: "'d"
  nb_bytes\<^sub>f :: "'e"

record ('a, 'b, 'c) Crc32bufP =
  buf\<^sub>f :: "'a"
  frm\<^sub>f :: "'b"
  to\<^sub>f :: "'c"

record ('a, 'b) Buffer =
  data\<^sub>f :: "'a"
  bound\<^sub>f :: "'b"

record ('a, 'b, 'c) WubiOpenP =
  ex\<^sub>f :: "'a"
  name\<^sub>f :: "'b"
  mode\<^sub>f :: "'c"

record ('a, 'b, 'c, 'd, 'e) VfsRenameContext =
  dirs\<^sub>f :: "'a"
  src_inode\<^sub>f :: "'b"
  src_name\<^sub>f :: "'c"
  dest_inode\<^sub>f :: "'d"
  dest_name\<^sub>f :: "'e"

record ('a, 'b, 'c, 'd) VfsDirEmitP =
  dirctx\<^sub>f :: "'a"
  name\<^sub>f :: "'b"
  ino\<^sub>f :: "'c"
  ftype\<^sub>f :: "'d"

record ('a, 'b) VfsDentry =
  name\<^sub>f :: "'a"
  inode\<^sub>f :: "'b"

record ('a, 'b) DelNode =
  id\<^sub>f :: "'a"
  oaddr\<^sub>f :: "'b"

record ('a, 'b) EbAddr =
  ebnum\<^sub>f :: "'a"
  offs\<^sub>f :: "'b"

record ('a, 'b, 'c) WubiIsMappedP =
  ex\<^sub>f :: "'a"
  ubi_vol\<^sub>f :: "'b"
  ebnum\<^sub>f :: "'c"

record ('a, 'b, 'c, 'd, 'e) ArrayUseValueP =
  arr\<^sub>f :: "'a"
  idx\<^sub>f :: "'b"
  f\<^sub>f :: "'c"
  acc\<^sub>f :: "'d"
  obsv\<^sub>f :: "'e"

record ('a, 'b) ElemA =
  elem\<^sub>f :: "'a"
  acc\<^sub>f :: "'b"

record ('a, 'b, 'c, 'd, 'e, 'f) ArrayMapP =
  arr\<^sub>f :: "'a"
  frm\<^sub>f :: "'b"
  to\<^sub>f :: "'c"
  f\<^sub>f :: "'d"
  acc\<^sub>f :: "'e"
  obsv\<^sub>f :: "'f"

record ('a, 'b, 'c, 'd, 'e, 'f) RbtModifyP =
  rbt\<^sub>f :: "'a"
  key\<^sub>f :: "'b"
  f\<^sub>f :: "'c"
  node\<^sub>f :: "'d"
  acc\<^sub>f :: "'e"
  obsv\<^sub>f :: "'f"

record ('a, 'b, 'c, 'd, 'e, 'f) RbtIterateNoBreakP =
  rbt\<^sub>f :: "'a"
  frm\<^sub>f :: "'b"
  to\<^sub>f :: "'c"
  f\<^sub>f :: "'d"
  acc\<^sub>f :: "'e"
  obsv\<^sub>f :: "'f"

record ('a, 'b, 'c, 'd, 'e, 'f, 'g) RbtFilterP =
  rbt\<^sub>f :: "'a"
  frm\<^sub>f :: "'b"
  to\<^sub>f :: "'c"
  cond\<^sub>f :: "'d"
  f\<^sub>f :: "'e"
  acc\<^sub>f :: "'f"
  obsv\<^sub>f :: "'g"

record ('a, 'b, 'c, 'd, 'e, 'f) RbtCondEraseP =
  rbt\<^sub>f :: "'a"
  key\<^sub>f :: "'b"
  cond\<^sub>f :: "'c"
  f\<^sub>f :: "'d"
  acc\<^sub>f :: "'e"
  obsv\<^sub>f :: "'f"

record ('a, 'b, 'c, 'd) ListFoldP =
  list\<^sub>f :: "'a"
  f\<^sub>f :: "'b"
  acc\<^sub>f :: "'c"
  obsv\<^sub>f :: "'d"

record ('a, 'b, 'c) ElemAO =
  elem\<^sub>f :: "'a"
  acc\<^sub>f :: "'b"
  obsv\<^sub>f :: "'c"

record ('a, 'b) ElemB =
  elem\<^sub>f :: "'a"
  rbrk\<^sub>f :: "'b"

datatype ('a, 'b) FindResult =
  Found "'a"|
  NotFound "'b"

record ('a, 'b, 'c) ListFreeP =
  list\<^sub>f :: "'a"
  f\<^sub>f :: "'b"
  ex\<^sub>f :: "'c"

datatype ('a, 'b) VfsRenameDirs =
  Dest "'a"|
  SrcDest "'b"

record ('a, 'b) VfsRenameDirsDiff =
  src_dir\<^sub>f :: "'a"
  dest_dir\<^sub>f :: "'b"

record ('a, 'b, 'c) FsopFillSuperRR =
  ex\<^sub>f :: "'a"
  vsup\<^sub>f :: "'b"
  root\<^sub>f :: "'c"

record ('a, 'b) VfsInode =
  vfs\<^sub>f :: "'a"
  fs\<^sub>f :: "'b"

record 'a FsInode =
  a\<^sub>f :: "'a"

record ('a, 'b, 'c, 'd) FsmState =
  nb_free_eb\<^sub>f :: "'a"
  used_eb\<^sub>f :: "'b"
  dirty_space\<^sub>f :: "'c"
  gim\<^sub>f :: "'d"

record 'a FsopState =
  is_ro\<^sub>f :: "'a"

record ('a, 'b) GimNode =
  count\<^sub>f :: "'a"
  sqnum\<^sub>f :: "'b"

record 'a IndexState =
  addrs\<^sub>f :: "'a"

record ('a, 'b, 'c, 'd, 'e, 'f) Seq32StepFParam =
  frm\<^sub>f :: "'a"
  to\<^sub>f :: "'b"
  stepf\<^sub>f :: "'c"
  f\<^sub>f :: "'d"
  acc\<^sub>f :: "'e"
  obsv\<^sub>f :: "'f"

record ('a, 'b, 'c, 'd, 'e, 'f) Seq32Param =
  frm\<^sub>f :: "'a"
  to\<^sub>f :: "'b"
  step\<^sub>f :: "'c"
  f\<^sub>f :: "'d"
  acc\<^sub>f :: "'e"
  obsv\<^sub>f :: "'f"

datatype ('a, 'b) LoopResult =
  Break "'a"|
  Iterate "'b"

record ('a, 'b) VfsDirContext =
  os\<^sub>f :: "'a"
  pos\<^sub>f :: "'b"

record ('a, 'b) OSTimeSpec =
  tv_sec\<^sub>f :: "'a"
  tv_nsec\<^sub>f :: "'b"

record ('a, 'b, 'c, 'd) ObjAddr =
  ebnum\<^sub>f :: "'a"
  offs\<^sub>f :: "'b"
  len\<^sub>f :: "'c"
  sqnum\<^sub>f :: "'d"

record ('a, 'b) ObjData =
  id\<^sub>f :: "'a"
  odata\<^sub>f :: "'b"

record 'a ObjDel =
  id\<^sub>f :: "'a"

record ('a, 'b, 'c, 'd) ObjDentry =
  ino\<^sub>f :: "'a"
  dtype\<^sub>f :: "'b"
  nlen\<^sub>f :: "'c"
  name\<^sub>f :: "'d"

record ('a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j) ObjInode =
  id\<^sub>f :: "'a"
  size\<^sub>f :: "'b"
  atime_sec\<^sub>f :: "'c"
  ctime_sec\<^sub>f :: "'d"
  mtime_sec\<^sub>f :: "'e"
  nlink\<^sub>f :: "'f"
  uid\<^sub>f :: "'g"
  gid\<^sub>f :: "'h"
  mode\<^sub>f :: "'i"
  flags\<^sub>f :: "'j"

record ('a, 'b, 'c) ObjSummary =
  nb_sum_entry\<^sub>f :: "'a"
  entries\<^sub>f :: "'b"
  sum_offs\<^sub>f :: "'c"

record ('a, 'b, 'c, 'd, 'e) ObjSumEntry =
  id\<^sub>f :: "'a"
  sqnum\<^sub>f :: "'b"
  len\<^sub>f :: "'c"
  del_flags_and_offs\<^sub>f :: "'d"
  count\<^sub>f :: "'e"

record ('a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i) ObjSuper =
  nb_eb\<^sub>f :: "'a"
  eb_size\<^sub>f :: "'b"
  io_size\<^sub>f :: "'c"
  nb_reserved_gc\<^sub>f :: "'d"
  nb_reserved_del\<^sub>f :: "'e"
  cur_eb\<^sub>f :: "'f"
  cur_offs\<^sub>f :: "'g"
  last_inum\<^sub>f :: "'h"
  next_sqnum\<^sub>f :: "'i"

record ('a, 'b) OptElemA =
  oelem\<^sub>f :: "'a"
  acc\<^sub>f :: "'b"

record ('a, 'b, 'c) OptElemAO =
  oelem\<^sub>f :: "'a"
  acc\<^sub>f :: "'b"
  obsv\<^sub>f :: "'c"

record ('a, 'b, 'c) RbtModifyR =
  rbt\<^sub>f :: "'a"
  optnode\<^sub>f :: "'b"
  acc\<^sub>f :: "'c"

datatype ('a, 'b) Option =
  None "'a"|
  Some "'b"

datatype ('a, 'b) R =
  Error "'a"|
  Success "'b"

record ('a, 'b, 'c, 'd, 'e) Seq32SimpleParam =
  frm\<^sub>f :: "'a"
  to\<^sub>f :: "'b"
  step\<^sub>f :: "'c"
  f\<^sub>f :: "'d"
  acc\<^sub>f :: "'e"

record ('a, 'b, 'c) Seq32_bodyParam =
  acc\<^sub>f :: "'a"
  obsv\<^sub>f :: "'b"
  idx\<^sub>f :: "'c"

record ('a, 'b, 'c, 'd) WubiOpenVolumeP =
  ex\<^sub>f :: "'a"
  ubi_num\<^sub>f :: "'b"
  vol_id\<^sub>f :: "'c"
  mode\<^sub>f :: "'d"

record ('a, 'b, 'c, 'd, 'e, 'f, 'g, 'h) VfsExtendedInfo =
  fs_type\<^sub>f :: "'a"
  best_blocksize\<^sub>f :: "'b"
  blocks_total\<^sub>f :: "'c"
  blocks_free\<^sub>f :: "'d"
  blocks_available\<^sub>f :: "'e"
  files_total\<^sub>f :: "'f"
  files_free\<^sub>f :: "'g"
  max_namelen\<^sub>f :: "'h"

record ('a, 'b, 'c, 'd, 'e, 'f) VfsMountInfo =
  s_magic\<^sub>f :: "'a"
  s_flags\<^sub>f :: "'b"
  s_max_links\<^sub>f :: "'c"
  s_maxbytes\<^sub>f :: "'d"
  s_blocksize\<^sub>f :: "'e"
  s_blocksize_bits\<^sub>f :: "'f"

record ('a, 'b, 'c) WordArrayPutP =
  arr\<^sub>f :: "'a"
  idx\<^sub>f :: "'b"
  val\<^sub>f :: "'c"

type_synonym  WordArrayIndex = "32 word"

type_synonym 'a WordArrayCopyP\<^sub>T = "'a WordArray \<times> 'a WordArray \<times> 32 word \<times> 32 word \<times> 32 word"

type_synonym 'a WordArrayFindSubP\<^sub>T = "'a WordArray \<times> 'a WordArray \<times> 32 word"

type_synonym 'a WordArrayPutP\<^sub>T = "('a WordArray, 32 word, 'a) WordArrayPutP"

type_synonym 'a WordArraySetP\<^sub>T = "'a WordArray \<times> 32 word \<times> 32 word \<times> 'a"

type_synonym 'a WordArrayView = "'a WordArray View"

type_synonym  VfsType = "32 word"

type_synonym  VfsSize = "64 word"

type_synonym  VfsPosition = "64 word"

type_synonym  VfsMountInfoFlag = "32 word"

type_synonym  VfsMountInfo\<^sub>T = "(64 word, 32 word, 32 word, 64 word, 32 word, 32 word) VfsMountInfo"

type_synonym  VfsMode = "32 word"

type_synonym  VfsIno = "32 word"

type_synonym  VfsFlags = "32 word"

type_synonym  VfsExtendedInfo\<^sub>T = "(64 word, 64 word, 64 word, 64 word, 64 word, 64 word, 64 word, 64 word) VfsExtendedInfo"

type_synonym  VfsDeviceMinor = "32 word"

type_synonym  VfsDeviceMajor = "32 word"

type_synonym  UbiNum = "32 word"

type_synonym  UbiMode = "32 word"

type_synonym  UbiId = "32 word"

type_synonym ('a, 'b) WordArrayCloneP\<^sub>T = " SysState \<times> 'a WordArray"

type_synonym 'a WordArraySliceP\<^sub>T = " SysState \<times> 'a WordArray \<times> 32 word \<times> 32 word"

type_synonym  WubiOpenVolumeP\<^sub>T = "( SysState, 32 word, 32 word, 32 word) WubiOpenVolumeP"

type_synonym ('acc, 'obsv, 'rbrk) Seq64_bodyParam\<^sub>T = "('acc, 'obsv, 64 word) Seq32_bodyParam"

type_synonym  Seq32_stepParam = "32 word \<Rightarrow> 32 word"

type_synonym 'acc Seq32_simple_bodyParam = "'acc"

type_synonym 'acc Seq32_simple_body = "'acc \<Rightarrow> 'acc"

type_synonym ('acc, 'obsv, 'rbrk) Seq32_bodyParam\<^sub>T = "('acc, 'obsv, 32 word) Seq32_bodyParam"

type_synonym 'acc Seq32SimpleParam\<^sub>T = "(32 word, 32 word, 32 word, 'acc \<Rightarrow> 'acc, 'acc) Seq32SimpleParam"

type_synonym ('a, 'e) Result\<^sub>T = "('e, 'a) R"

type_synonym ('c, 'a, 'e) ResultWith\<^sub>T = "'c \<times> ('e, 'a) R"

type_synonym ('c, 'a, 'e) RR\<^sub>T = "'c \<times> ('e, 'a) R"

type_synonym ('a, 'e) R\<^sub>T = "('e, 'a) R"

type_synonym ('k, 'v) RbtCreateR\<^sub>T = "( SysState,  SysState \<times> ('k, 'v) Rbt) R"

type_synonym 'a Option\<^sub>T = "(unit, 'a) Option"

type_synonym ('k, 'v, 'acc) RbtModifyR\<^sub>T = "(('k, 'v) Rbt, (unit, ('k, 'v) RbtNode) Option, 'acc) RbtModifyR"

type_synonym ('a, 'acc, 'obsv) OptElemAO\<^sub>T = "((unit, 'a) Option, 'acc, 'obsv) OptElemAO"

type_synonym ('a, 'acc) OptElemA\<^sub>T = "((unit, 'a) Option, 'acc) OptElemA"

type_synonym  ObjType = "8 word"

type_synonym  ObjTrans = "8 word"

type_synonym  ObjSuper\<^sub>T = "(32 word, 32 word, 32 word, 32 word, 32 word, 32 word, 32 word, 32 word, 64 word) ObjSuper"

type_synonym  ObjSumEntry\<^sub>T = "(64 word, 64 word, 32 word, 32 word, 16 word) ObjSumEntry"

type_synonym  ObjSummary\<^sub>T = "(32 word,  ObjSumEntry\<^sub>T WordArray, 32 word) ObjSummary"

type_synonym  ObjInodeFlags = "32 word"

type_synonym  ObjIdInode = "64 word"

type_synonym  ObjIdDentarr = "64 word"

type_synonym  ObjIdData = "64 word"

type_synonym  ObjId = "64 word"

type_synonym  ObjInode\<^sub>T = "(64 word, 64 word, 64 word, 64 word, 64 word, 32 word, 32 word, 32 word, 32 word, 32 word) ObjInode"

type_synonym  ObjDentry\<^sub>T = "(32 word, 8 word, 16 word, 8 word WordArray) ObjDentry"

type_synonym  ObjDel\<^sub>T = "64 word ObjDel"

type_synonym  ObjData\<^sub>T = "(64 word, 8 word WordArray) ObjData"

type_synonym  ObjAddr\<^sub>T = "(32 word, 32 word, 32 word, 64 word) ObjAddr"

type_synonym  RbtIndexNode = "(64 word,  ObjAddr\<^sub>T) RbtNode"

type_synonym  OSTimeSpec\<^sub>T = "(32 word, 32 word) OSTimeSpec"

type_synonym  OSPageOffset = "64 word"

type_synonym  VfsDirContext\<^sub>T = "( OSDirContext, 64 word) VfsDirContext"

type_synonym ('a, 'b) LoopResult\<^sub>T = "('b, 'a) LoopResult"

type_synonym 'a List = "'a ListNode List'"

type_synonym ('acc, 'brk) LRR\<^sub>T = "'acc \<times> ('brk, unit) LoopResult"

type_synonym ('acc, 'obsv, 'rbrk) Seq32_body = "('acc, 'obsv, 32 word) Seq32_bodyParam \<Rightarrow> 'acc \<times> ('rbrk, unit) LoopResult"

type_synonym ('acc, 'obsv, 'rbrk) Seq32Param\<^sub>T = "(32 word, 32 word, 32 word, ('acc, 'obsv, 32 word) Seq32_bodyParam \<Rightarrow> 'acc \<times> ('rbrk, unit) LoopResult, 'acc, 'obsv) Seq32Param"

type_synonym ('acc, 'obsv, 'rbrk) Seq32StepFParam\<^sub>T = "(32 word, 32 word, 32 word \<Rightarrow> 32 word, ('acc, 'obsv, 32 word) Seq32_bodyParam \<Rightarrow> 'acc \<times> ('rbrk, unit) LoopResult, 'acc, 'obsv) Seq32StepFParam"

type_synonym ('acc, 'obsv, 'rbrk) Seq64_body = "('acc, 'obsv, 64 word) Seq32_bodyParam \<Rightarrow> 'acc \<times> ('rbrk, unit) LoopResult"

type_synonym ('acc, 'obsv, 'rbrk) Seq64Param\<^sub>T = "(64 word, 64 word, 64 word, ('acc, 'obsv, 64 word) Seq32_bodyParam \<Rightarrow> 'acc \<times> ('rbrk, unit) LoopResult, 'acc, 'obsv) Seq32Param"

type_synonym ('a, 'acc, 'rbrk) WordArrayMapRE\<^sub>T = "('a WordArray \<times> 'acc) \<times> ('rbrk, unit) LoopResult"

type_synonym  IndexState\<^sub>T = "(64 word,  ObjAddr\<^sub>T) Rbt IndexState"

type_synonym  GimNode\<^sub>T = "(16 word, 64 word) GimNode"

type_synonym  RbtGim = "(64 word,  GimNode\<^sub>T) Rbt"

type_synonym  RbtGimNode = "(64 word,  GimNode\<^sub>T) RbtNode"

type_synonym  FsopState\<^sub>T = "bool FsopState"

type_synonym  FsmState\<^sub>T = "(32 word, 8 word WordArray, 32 word WordArray, (64 word,  GimNode\<^sub>T) Rbt) FsmState"

type_synonym  FsInode\<^sub>T = "32 word FsInode"

type_synonym  VfsInode\<^sub>T = "( VfsInodeAbstract,  FsInode\<^sub>T) VfsInode"

type_synonym  FsopFillSuperRR\<^sub>T = "( SysState,  VfsMountInfo\<^sub>T,  VfsInode\<^sub>T) FsopFillSuperRR"

type_synonym  VfsRenameDirsDiff\<^sub>T = "( VfsInode\<^sub>T,  VfsInode\<^sub>T) VfsRenameDirsDiff"

type_synonym  VfsRenameDirs\<^sub>T = "( VfsInode\<^sub>T,  VfsRenameDirsDiff\<^sub>T) VfsRenameDirs"

type_synonym 'a FreeF = " SysState \<times> 'a \<Rightarrow>  SysState"

type_synonym 'a ListFreeP\<^sub>T = "('a ListNode List',  SysState \<times> 'a ListNode \<Rightarrow>  SysState,  SysState) ListFreeP"

type_synonym ('a, 'acc, 'obsv) FreeAccF = " SysState \<times> 'a \<times> 'acc \<times> 'obsv \<Rightarrow>  SysState \<times> 'acc"

type_synonym  FindResult\<^sub>T = "(32 word, unit) FindResult"

type_synonym  ErrCode = "32 word"

type_synonym  ResUbi\<^sub>T = "( SysState \<times>  UbiVol) \<times> (32 word, unit) R"

type_synonym  WubiGetDevInfoR\<^sub>T = "(32 word \<times>  UbiDevInfo,  UbiDevInfo) R"

type_synonym  WubiIsMappedR\<^sub>T = " SysState \<times> (32 word, bool) R"

type_synonym ('a, 'rbrk) ElemB\<^sub>T = "('a, 'rbrk) ElemB"

type_synonym ('a, 'acc, 'obsv) ElemAO\<^sub>T = "('a, 'acc, 'obsv) ElemAO"

type_synonym ('a, 'acc, 'obsv) ListFoldF = "('a ListNode, 'acc, 'obsv) ElemAO \<Rightarrow> 'acc"

type_synonym ('a, 'acc, 'obsv) ListFoldP\<^sub>T = "('a ListNode List', ('a ListNode, 'acc, 'obsv) ElemAO \<Rightarrow> 'acc, 'acc, 'obsv) ListFoldP"

type_synonym ('k, 'v, 'acc, 'obsv) RbtElemAO\<^sub>T = "(('k, 'v) RbtNode, 'acc, 'obsv) ElemAO"

type_synonym ('k, 'v, 'acc, 'obsv) RbtCondF = "(('k, 'v) RbtNode, 'acc, 'obsv) ElemAO \<Rightarrow> bool"

type_synonym ('k, 'v, 'acc, 'obsv) RbtConsumeF = "(('k, 'v) RbtNode, 'acc, 'obsv) ElemAO \<Rightarrow> 'acc"

type_synonym ('k, 'v, 'acc, 'obsv) RbtCondEraseP\<^sub>T = "(('k, 'v) Rbt, 'k, (('k, 'v) RbtNode, 'acc, 'obsv) ElemAO \<Rightarrow> bool, (('k, 'v) RbtNode, 'acc, 'obsv) ElemAO \<Rightarrow> 'acc, 'acc, 'obsv) RbtCondEraseP"

type_synonym ('k, 'v, 'acc, 'obsv) RbtFilterP\<^sub>T = "(('k, 'v) Rbt, 'k, 'k, (('k, 'v) RbtNode, 'acc, 'obsv) ElemAO \<Rightarrow> bool, (('k, 'v) RbtNode, 'acc, 'obsv) ElemAO \<Rightarrow> 'acc, 'acc, 'obsv) RbtFilterP"

type_synonym ('k, 'v, 'acc, 'obsv, 'rbrk) RbtIterateF = "(('k, 'v) RbtNode, 'acc, 'obsv) ElemAO \<Rightarrow> ('rbrk \<times> ('k, 'v) RbtNode, 'acc \<times> ('k, 'v) RbtNode) LoopResult"

type_synonym ('k, 'v, 'acc, 'obsv) RbtIterateNoBreakF = "(('k, 'v) RbtNode, 'acc, 'obsv) ElemAO \<Rightarrow> 'acc \<times> ('k, 'v) RbtNode"

type_synonym ('k, 'v, 'acc, 'obsv) RbtIterateNoBreakP\<^sub>T = "(('k, 'v) Rbt, 'k, 'k, (('k, 'v) RbtNode, 'acc, 'obsv) ElemAO \<Rightarrow> 'acc \<times> ('k, 'v) RbtNode, 'acc, 'obsv) RbtIterateNoBreakP"

type_synonym ('k, 'v, 'acc, 'obsv) RbtModifyF = "(('k, 'v) RbtNode, 'acc, 'obsv) ElemAO \<Rightarrow> ('k, 'v) RbtNode \<times> 'acc"

type_synonym ('k, 'v, 'acc, 'obsv) RbtModifyP\<^sub>T = "(('k, 'v) Rbt, 'k, (('k, 'v) RbtNode, 'acc, 'obsv) ElemAO \<Rightarrow> ('k, 'v) RbtNode \<times> 'acc, ('k, 'v) RbtNode, 'acc, 'obsv) RbtModifyP"

type_synonym ('a, 'acc, 'obsv, 'rbrk) WordArrayFoldF = "('a, 'acc, 'obsv) ElemAO \<Rightarrow> ('rbrk, 'acc) LoopResult"

type_synonym ('a, 'acc, 'obsv, 'rbrk) WordArrayFoldP\<^sub>T = "('a WordArray, 32 word, 32 word, ('a, 'acc, 'obsv) ElemAO \<Rightarrow> ('rbrk, 'acc) LoopResult, 'acc, 'obsv) ArrayMapP"

type_synonym ('a, 'acc, 'obsv) WordArrayFoldNoBreakF = "('a, 'acc, 'obsv) ElemAO \<Rightarrow> 'acc"

type_synonym ('a, 'acc, 'obsv) WordArrayFoldNoBreakP\<^sub>T = "('a WordArray, 32 word, 32 word, ('a, 'acc, 'obsv) ElemAO \<Rightarrow> 'acc, 'acc, 'obsv) ArrayMapP"

type_synonym ('a, 'acc, 'obsv, 'rbrk) WordArrayMapF = "('a, 'acc, 'obsv) ElemAO \<Rightarrow> ('a \<times> 'acc) \<times> ('rbrk, unit) LoopResult"

type_synonym ('a, 'acc, 'obsv, 'rbrk) WordArrayMapP\<^sub>T = "('a WordArray, 32 word, 32 word, ('a, 'acc, 'obsv) ElemAO \<Rightarrow> ('a \<times> 'acc) \<times> ('rbrk, unit) LoopResult, 'acc, 'obsv) ArrayMapP"

type_synonym ('a, 'acc, 'obsv) WordArrayMapNoBreakF = "('a, 'acc, 'obsv) ElemAO \<Rightarrow> 'a \<times> 'acc"

type_synonym ('a, 'acc, 'obsv) WordArrayMapNoBreakP\<^sub>T = "('a WordArray, 32 word, 32 word, ('a, 'acc, 'obsv) ElemAO \<Rightarrow> 'a \<times> 'acc, 'acc, 'obsv) ArrayMapP"

type_synonym ('a, 'acc) ElemA\<^sub>T = "('a, 'acc) ElemA"

type_synonym ('a, 'acc, 'obsv) WordArrayModifyF = "('a, 'acc, 'obsv) ElemAO \<Rightarrow> ('a, 'acc) ElemA"

type_synonym ('a, 'acc, 'obsv) WordArrayModifyP\<^sub>T = "('a WordArray, 32 word, ('a, 'acc, 'obsv) ElemAO \<Rightarrow> ('a, 'acc) ElemA, 'acc, 'obsv) ArrayUseValueP"

type_synonym  EbNum = "32 word"

type_synonym  WubiIsMappedP\<^sub>T = "( SysState,  UbiVol, 32 word) WubiIsMappedP"

type_synonym  WubiLebEraseP\<^sub>T = " WubiIsMappedP\<^sub>T"

type_synonym  EbAddr\<^sub>T = "(32 word, 32 word) EbAddr"

type_synonym  DelNode\<^sub>T = "(64 word,  ObjAddr\<^sub>T) DelNode"

type_synonym  DelObjs = " DelNode\<^sub>T ListNode List'"

type_synonym  CString = "8 word WordArray"

type_synonym  VfsDentry\<^sub>T = "(8 word WordArray, (unit,  VfsInode\<^sub>T) Option) VfsDentry"

type_synonym  VfsDentryH\<^sub>T = "(8 word WordArray,  VfsInode\<^sub>T) VfsDentry"

type_synonym  VfsDirEmitP\<^sub>T = "( VfsDirContext\<^sub>T, 8 word WordArray, 32 word, 32 word) VfsDirEmitP"

type_synonym  VfsRenameContext\<^sub>T = "( VfsRenameDirs\<^sub>T,  VfsInode\<^sub>T, 8 word WordArray, (unit,  VfsInode\<^sub>T) Option, 8 word WordArray) VfsRenameContext"

type_synonym  WubiOpenP\<^sub>T = "( SysState, 8 word WordArray, 32 word) WubiOpenP"

type_synonym  BufOffs = "32 word"

type_synonym  Buffer\<^sub>T = "(8 word WordArray, 32 word) Buffer"

type_synonym  Crc32bufP\<^sub>T = "( Buffer\<^sub>T, 32 word, 32 word) Crc32bufP"

type_synonym  WubiLebChangeP\<^sub>T = "( SysState,  UbiVol, 32 word,  Buffer\<^sub>T, 32 word) WubiLebChangeP"

type_synonym  WubiLebReadR\<^sub>T = "( SysState \<times>  Buffer\<^sub>T) \<times> (32 word, unit) R"

type_synonym  WubiLebReadP\<^sub>T = "( SysState,  UbiVol, 32 word,  Buffer\<^sub>T, 32 word, 32 word) WubiLebReadP"

type_synonym  WubiLebWriteP\<^sub>T = "( SysState,  UbiVol, 32 word,  Buffer\<^sub>T, 32 word, 32 word) WubiLebWriteP"

type_synonym ('a, 'acc, 'obsv) ArrayUseValueF = "('a, 'acc, 'obsv) ElemAO \<Rightarrow> 'acc"

type_synonym ('a, 'acc, 'obsv) ArrayUseMaybeValueF = "((unit, 'a) Option, 'acc, 'obsv) OptElemAO \<Rightarrow> 'acc"

type_synonym ('a, 'acc) ArrayModifyF = "((unit, 'a) Option, 'acc) OptElemA \<Rightarrow> ((unit, 'a) Option, 'acc) OptElemA"

type_synonym ('a, 'acc, 'obsv) ArrayMapNoBreakF = "((unit, 'a) Option, 'acc, 'obsv) OptElemAO \<Rightarrow> (unit, 'a) Option \<times> 'acc"

type_synonym ('a, 'acc, 'obsv, 'rbrk) ArrayMapF = "((unit, 'a) Option, 'acc, 'obsv) OptElemAO \<Rightarrow> ((unit, 'a) Option \<times> 'rbrk, (unit, 'a) Option \<times> 'acc) LoopResult"

type_synonym ('a, 'acc, 'obsv, 'rbrk) ArrayMapExF = "('a, 'acc, 'obsv) ElemAO \<Rightarrow> (('a, 'rbrk) ElemB, ('a, 'acc) ElemA) LoopResult"

type_synonym ('a, 'acc, 'obsv) ArrayFoldNoBreakF = "('a, 'acc, 'obsv) ElemAO \<Rightarrow> 'acc"

type_synonym ('a, 'acc, 'obsv, 'rbrk) ArrayFoldF = "('a, 'acc, 'obsv) ElemAO \<Rightarrow> ('rbrk, 'acc) LoopResult"

type_synonym ('a, 'acc, 'obsv) ArrayFilterF = "('a, 'acc, 'obsv) ElemAO \<Rightarrow> 'acc \<times> ('a, unit) R"

type_synonym ('a, 'acc, 'obsv) ArrayFilterP\<^sub>T = "('a Array, ('a, 'acc, 'obsv) ElemAO \<Rightarrow> 'acc \<times> ('a, unit) R, 'acc, 'obsv) ArrayFoldP"

type_synonym ('a, 'acc, 'obsv) ArrayFoldNoBreakP\<^sub>T = "('a Array, ('a, 'acc, 'obsv) ElemAO \<Rightarrow> 'acc, 'acc, 'obsv) ArrayFoldP"

type_synonym ('a, 'acc, 'obsv, 'rbrk) ArrayFoldP\<^sub>T = "('a Array, ('a, 'acc, 'obsv) ElemAO \<Rightarrow> ('rbrk, 'acc) LoopResult, 'acc, 'obsv) ArrayFoldP"

type_synonym 'a ArrayFreeP\<^sub>T = "('a Array,  SysState \<times> 'a \<Rightarrow>  SysState,  SysState) ArrayFreeP"

type_synonym ('a, 'acc, 'obsv, 'rbrk) ArrayMapExP\<^sub>T = "('a Array, 32 word, 32 word, ('a, 'acc, 'obsv) ElemAO \<Rightarrow> (('a, 'rbrk) ElemB, ('a, 'acc) ElemA) LoopResult, 'acc, 'obsv) ArrayMapP"

type_synonym ('a, 'acc, 'obsv) ArrayMapNoBreakP\<^sub>T = "('a Array, 32 word, 32 word, ((unit, 'a) Option, 'acc, 'obsv) OptElemAO \<Rightarrow> (unit, 'a) Option \<times> 'acc, 'acc, 'obsv) ArrayMapP"

type_synonym ('a, 'acc, 'obsv, 'rbrk) ArrayMapP\<^sub>T = "('a Array, 32 word, 32 word, ((unit, 'a) Option, 'acc, 'obsv) OptElemAO \<Rightarrow> ((unit, 'a) Option \<times> 'rbrk, (unit, 'a) Option \<times> 'acc) LoopResult, 'acc, 'obsv) ArrayMapP"

type_synonym ('a, 'acc) ArrayModifyP\<^sub>T = "('a Array, 32 word, ((unit, 'a) Option, 'acc) OptElemA \<Rightarrow> ((unit, 'a) Option, 'acc) OptElemA, 'acc) ArrayModifyP"

type_synonym 'a ArrayReplaceP\<^sub>T = "('a Array, 32 word, 'a,  SysState \<times> 'a \<Rightarrow>  SysState,  SysState) ArrayReplaceP"

type_synonym ('a, 'acc, 'obsv) ArrayUseMaybeValueP\<^sub>T = "('a Array, 32 word, ((unit, 'a) Option, 'acc, 'obsv) OptElemAO \<Rightarrow> 'acc, 'acc, 'obsv) ArrayUseValueP"

type_synonym ('a, 'acc, 'obsv) ArrayUseValueP\<^sub>T = "('a Array, 32 word, ('a, 'acc, 'obsv) ElemAO \<Rightarrow> 'acc, 'acc, 'obsv) ArrayUseValueP"

type_synonym  ObjDentarr\<^sub>T = "(64 word, 32 word,  ObjDentry\<^sub>T Array) ObjDentarr"

type_synonym  BilbyFsReaddirContext\<^sub>T = "( ObjDentarr\<^sub>T, 32 word) BilbyFsReaddirContext"

type_synonym  ObjUnion\<^sub>T = "( ObjData\<^sub>T,  ObjDel\<^sub>T,  ObjDentarr\<^sub>T,  ObjInode\<^sub>T, unit,  ObjSummary\<^sub>T,  ObjSuper\<^sub>T) ObjUnion"

type_synonym  Obj\<^sub>T = "(32 word, 32 word, 64 word, 32 word, 32 word, 8 word, 8 word,  ObjUnion\<^sub>T) Obj"

type_synonym  MountState\<^sub>T = "(32 word, 32 word,  ObjSuper\<^sub>T,  Obj\<^sub>T, 32 word,  UbiVolInfo,  UbiDevInfo, bool) MountState"

type_synonym ('a, 'rbrk) ArrB\<^sub>T = "('a, 'rbrk) ArrB"

type_synonym ('a, 'acc) ArrA\<^sub>T = "('a, 'acc) ArrA"

type_synonym ('a, 'acc, 'obsv) AllocPoolUseF = "('a, 'acc, 'obsv) ElemAO \<Rightarrow> 'acc"

type_synonym 'a AllocPoolPreallocP\<^sub>T = "( SysState, 'a AllocPool, 32 word) AllocPoolPreallocP"

type_synonym ('a, 'acc, 'obsv) AllocPoolUseP\<^sub>T = "('a AllocPool, ('a, 'acc, 'obsv) ElemAO \<Rightarrow> 'acc, 'acc, 'obsv) AllocPoolUseP"

type_synonym  AllocPools\<^sub>T = "((64 word,  ObjAddr\<^sub>T) RbtNode AllocPool, (64 word,  GimNode\<^sub>T) RbtNode AllocPool) AllocPools"

type_synonym  OstoreState\<^sub>T = "(32 word, 64 word,  Buffer\<^sub>T, 32 word,  Buffer\<^sub>T, 32 word, 32 word,  Obj\<^sub>T,  AllocPools\<^sub>T,  ObjAddr\<^sub>T,  FsmState\<^sub>T,  IndexState\<^sub>T,  UbiVol,  ObjSummary\<^sub>T,  Obj\<^sub>T) OstoreState"

type_synonym  FsState\<^sub>T = "( FsopState\<^sub>T,  MountState\<^sub>T,  OstoreState\<^sub>T) FsState"

type_synonym  FsopCreateP\<^sub>T = "( SysState,  FsState\<^sub>T,  VfsInode\<^sub>T, 8 word WordArray, 32 word,  VfsInode\<^sub>T) FsopCreateP"

type_synonym  FsopDoMoveDelP\<^sub>T = "( SysState,  FsState\<^sub>T,  VfsInode\<^sub>T, 8 word WordArray,  VfsInode\<^sub>T,  VfsInode\<^sub>T, 8 word WordArray,  VfsInode\<^sub>T) FsopDoMoveDelP"

type_synonym  FsopDoMoveDelRR\<^sub>T = "( SysState,  FsState\<^sub>T,  VfsInode\<^sub>T,  VfsInode\<^sub>T,  VfsInode\<^sub>T, (unit,  VfsInode\<^sub>T) Option) FsopMoveRR"

type_synonym  FsopDoMoveP\<^sub>T = "( SysState,  FsState\<^sub>T,  VfsInode\<^sub>T, 8 word WordArray,  VfsInode\<^sub>T,  VfsInode\<^sub>T, 8 word WordArray) FsopDoMoveP"

type_synonym  FsopDoMoveRR\<^sub>T = "( SysState,  FsState\<^sub>T,  VfsInode\<^sub>T,  VfsInode\<^sub>T,  VfsInode\<^sub>T) FsopDoMoveRR"

type_synonym  FsopDoRenameDelP\<^sub>T = "( SysState,  FsState\<^sub>T,  VfsInode\<^sub>T, 8 word WordArray,  VfsInode\<^sub>T, 8 word WordArray,  VfsInode\<^sub>T) FsopDoRenameDelP"

type_synonym  FsopDoRenameDelRR\<^sub>T = "( SysState,  FsState\<^sub>T,  VfsInode\<^sub>T,  VfsInode\<^sub>T, (unit,  VfsInode\<^sub>T) Option) FsopRenameRR"

type_synonym  FsopDoRenameP\<^sub>T = "( SysState,  FsState\<^sub>T,  VfsInode\<^sub>T, 8 word WordArray,  VfsInode\<^sub>T, 8 word WordArray) FsopDoRenameP"

type_synonym  FsopDoRenameRR\<^sub>T = "( SysState,  FsState\<^sub>T,  VfsInode\<^sub>T,  VfsInode\<^sub>T) FsopDoRenameRR"

type_synonym  FsopFollowLinkP\<^sub>T = "( SysState,  FsState\<^sub>T,  VfsInode\<^sub>T,  Buffer\<^sub>T) FsopFollowLinkP"

type_synonym  FsopFsP\<^sub>T = "( SysState,  FsState\<^sub>T) FsopFsP"

type_synonym  FsopGetattrP\<^sub>T = "( SysState,  FsState\<^sub>T,  VfsStat,  VfsInode\<^sub>T) FsopGetattrP"

type_synonym  FsopGetattrR\<^sub>T = "( SysState,  FsState\<^sub>T,  VfsStat) FsopGetattrR"

type_synonym  FsopIgetP\<^sub>T = "( SysState,  FsState\<^sub>T, 32 word,  VfsInode\<^sub>T) FsopIgetP"

type_synonym  FsopIgetRR\<^sub>T = "( SysState,  FsState\<^sub>T,  VfsInode\<^sub>T) FsopIgetRR"

type_synonym  FsopLinkP\<^sub>T = "( SysState,  FsState\<^sub>T,  VfsInode\<^sub>T, 8 word WordArray,  VfsInode\<^sub>T) FsopLinkP"

type_synonym  FsopLookupP\<^sub>T = "( SysState,  FsState\<^sub>T,  VfsInode\<^sub>T, 8 word WordArray) FsopLookupP"

type_synonym  FsopLookupRR\<^sub>T = "( SysState,  FsState\<^sub>T,  VfsInode\<^sub>T) FsopLookupRR"

type_synonym  FsopMoveP\<^sub>T = "( SysState,  FsState\<^sub>T,  VfsInode\<^sub>T, 8 word WordArray,  VfsInode\<^sub>T,  VfsInode\<^sub>T, 8 word WordArray, (unit,  VfsInode\<^sub>T) Option) FsopMoveP"

type_synonym  FsopMoveRR\<^sub>T = " FsopDoMoveDelRR\<^sub>T"

type_synonym  FsopRR\<^sub>T = "( SysState,  FsState\<^sub>T,  VfsInode\<^sub>T,  VfsInode\<^sub>T) FsopRR"

type_synonym  FsopReadPageP\<^sub>T = "( SysState,  FsState\<^sub>T,  VfsInode\<^sub>T, 64 word,  Buffer\<^sub>T) FsopReadPageP"

type_synonym  FsopReadPageRR\<^sub>T = "( SysState,  FsState\<^sub>T,  VfsInode\<^sub>T,  Buffer\<^sub>T) FsopWriteRR"

type_synonym  FsopRenameP\<^sub>T = "( SysState,  FsState\<^sub>T,  VfsInode\<^sub>T, 8 word WordArray,  VfsInode\<^sub>T, 8 word WordArray, (unit,  VfsInode\<^sub>T) Option) FsopRenameP"

type_synonym  FsopRenameRR\<^sub>T = " FsopDoRenameDelRR\<^sub>T"

type_synonym  FsopSetattrP\<^sub>T = "( SysState,  FsState\<^sub>T,  VfsIattr,  VfsInode\<^sub>T) FsopSetattrP"

type_synonym  FsopSetattrRR\<^sub>T = " FsopIgetRR\<^sub>T"

type_synonym  FsopSymlinkP\<^sub>T = "( SysState,  FsState\<^sub>T,  VfsInode\<^sub>T, 8 word WordArray, 8 word WordArray,  VfsInode\<^sub>T) FsopSymlinkP"

type_synonym  FsopSymlinkRR\<^sub>T = "( SysState,  FsState\<^sub>T,  VfsInode\<^sub>T, 8 word WordArray,  VfsInode\<^sub>T) FsopSymlinkRR"

type_synonym  FsopTruncateP\<^sub>T = "( SysState,  FsState\<^sub>T,  VfsInode\<^sub>T, 64 word) FsopTruncateP"

type_synonym  FsopUnlinkP\<^sub>T = " FsopLinkP\<^sub>T"

type_synonym  FsopVfsInodeE\<^sub>T = "(32 word,  SysState,  FsState\<^sub>T,  VfsInode\<^sub>T) FsopVfsInodeE"

type_synonym  FsopVfsInodeP\<^sub>T = " FsopSetattrRR\<^sub>T"

type_synonym  FsopWriteP\<^sub>T = "( SysState,  FsState\<^sub>T,  VfsInode\<^sub>T, 64 word, 32 word,  Buffer\<^sub>T) FsopWriteP"

type_synonym  FsopWriteRR\<^sub>T = " FsopReadPageRR\<^sub>T"

type_synonym  ReadDirParams\<^sub>T = "( SysState,  FsState\<^sub>T,  VfsDirContext\<^sub>T, (unit,  BilbyFsReaddirContext\<^sub>T) Option) ReadDirParams"

type_synonym  FsState'\<^sub>T = " FsState\<^sub>T"

type_synonym  FsState'Taken\<^sub>T = " FsState'\<^sub>T"

type_synonym  FsopFs'E\<^sub>T = "(32 word,  SysState,  FsState'Taken\<^sub>T) FsopFs'E"

type_synonym  FsopInitP\<^sub>T = "( SysState,  FsState'Taken\<^sub>T, 8 word WordArray) FsopInitP"

type_synonym  FsopFillSuperE\<^sub>T = "(32 word,  FsState'Taken\<^sub>T) FsopFillSuperE"

type_synonym  FsopFillSuperP\<^sub>T = "( SysState,  FsState'Taken\<^sub>T,  VfsMountInfo\<^sub>T, bool,  VfsInode\<^sub>T) FsopFillSuperP"

type_synonym  FsopFs'P\<^sub>T = " FsopFsP\<^sub>T"

type_synonym  FsopDoMoveHelperP\<^sub>T = "( SysState,  MountState\<^sub>T,  OstoreState\<^sub>T, 32 word, 32 word,  Obj\<^sub>T,  Obj\<^sub>T,  VfsInode\<^sub>T,  VfsInode\<^sub>T,  VfsInode\<^sub>T, (unit,  VfsInode\<^sub>T) Option) FsopDoMoveHelperP"

type_synonym  FsopDoMoveHelperRR\<^sub>T = "( SysState,  OstoreState\<^sub>T,  VfsInode\<^sub>T,  VfsInode\<^sub>T,  VfsInode\<^sub>T, (unit,  VfsInode\<^sub>T) Option) FsopDoMoveHelperRR"

type_synonym  FsopDoRenameHelper1P\<^sub>T = "( SysState,  MountState\<^sub>T,  OstoreState\<^sub>T, 32 word,  Obj\<^sub>T,  VfsInode\<^sub>T,  VfsInode\<^sub>T, (unit,  VfsInode\<^sub>T) Option) FsopDoRenameHelper1P"

type_synonym  FsopDoRenameHelper1R\<^sub>T = "( SysState,  OstoreState\<^sub>T,  VfsInode\<^sub>T,  VfsInode\<^sub>T, (unit,  VfsInode\<^sub>T) Option) FsopDoRenameHelper1R"

type_synonym  FsopDoRenameHelperP\<^sub>T = "( SysState,  MountState\<^sub>T,  OstoreState\<^sub>T, 32 word, 32 word,  Obj\<^sub>T,  Obj\<^sub>T,  VfsInode\<^sub>T,  VfsInode\<^sub>T, (unit,  VfsInode\<^sub>T) Option) FsopDoRenameHelperP"

type_synonym  FsopDoRenameHelperRR\<^sub>T = " FsopDoRenameHelper1R\<^sub>T"

type_synonym  ReadDirLoopParams\<^sub>T = " SysState \<times>  OstoreState\<^sub>T \<times>  VfsDirContext\<^sub>T \<times>  BilbyFsReaddirContext\<^sub>T"

type_synonym  SumLoopAcc\<^sub>T = " SysState \<times> 32 word \<times>  OstoreState\<^sub>T \<times>  DelNode\<^sub>T ListNode List'"

type_synonym  DeleteObjAccs\<^sub>T = " SysState \<times>  FsmState\<^sub>T \<times> (64 word,  GimNode\<^sub>T) RbtNode AllocPool"

consts u64_to_u8 :: "64 word \<Rightarrow> 8 word"

consts u64_to_u32 :: "64 word \<Rightarrow> 32 word"

consts u64_to_u16 :: "64 word \<Rightarrow> 16 word"

consts u32_to_u8 :: "32 word \<Rightarrow> 8 word"

consts u32_to_u16 :: "32 word \<Rightarrow> 16 word"

consts u16_to_u8 :: "16 word \<Rightarrow> 8 word"

consts random_u32 :: "unit \<Rightarrow> 32 word"

consts cogent_warn_u64 :: "64 word \<Rightarrow> unit"

consts cogent_warn_u32 :: "32 word \<Rightarrow> unit"

consts cogent_warn :: "string \<Rightarrow> unit"

consts cogent_log2 :: "32 word \<Rightarrow> 32 word"

consts cogent_debug_u64_hex :: "64 word \<Rightarrow> unit"

consts cogent_debug_u64 :: "64 word \<Rightarrow> unit"

consts cogent_debug_u32_oct :: "32 word \<Rightarrow> unit"

consts cogent_debug_u32_hex :: "32 word \<Rightarrow> unit"

consts cogent_debug_u32 :: "32 word \<Rightarrow> unit"

consts cogent_debug_bool :: "bool \<Rightarrow> unit"

consts cogent_debug :: "string \<Rightarrow> unit"

consts cogent_assert :: "bool \<Rightarrow> unit"

consts bilbyfs_error_u32 :: "32 word \<Rightarrow> unit"

consts bilbyfs_error :: "string \<Rightarrow> unit"

consts wordarray_cmp :: "8 word WordArray \<times> 8 word WordArray \<Rightarrow> bool"

consts wordarray_copy :: "'a WordArray \<times> 'a WordArray \<times> 32 word \<times> 32 word \<times> 32 word \<Rightarrow> 'a WordArray"

consts wordarray_fold' :: "'a WordArray \<times> ('acc \<times> 'obsv \<times> 'a \<Rightarrow> 'acc) \<times> 'acc \<times> 'obsv \<Rightarrow> 'acc"

consts wordarray_get :: "'a WordArray \<times> 32 word \<Rightarrow> 'a"

consts wordarray_length :: "'a WordArray \<Rightarrow> 32 word"

consts wordarray_map' :: "'a WordArray \<times> ('acc \<times> 'obsv \<times> 'a \<Rightarrow> 'acc \<times> 'a) \<times> 'acc \<times> 'obsv \<Rightarrow> 'a WordArray \<times> 'acc"

consts wordarray_map_simple :: "'a WordArray \<times> ('a \<Rightarrow> 'a) \<Rightarrow> 'a WordArray"

consts wordarray_put2 :: "('a WordArray, 32 word, 'a) WordArrayPutP \<Rightarrow> 'a WordArray"

consts wordarray_set :: "'a WordArray \<times> 32 word \<times> 32 word \<times> 'a \<Rightarrow> 'a WordArray"

consts wordarray_split :: "'a WordArray \<times> 32 word \<Rightarrow> 'a WordArray \<times> 'a WordArray"

consts wordarray_take :: "'a WordArray \<times> 32 word \<Rightarrow> 'a WordArray"

consts wordarray_u8_as_u32 :: "8 word WordArray \<Rightarrow> 32 word"

consts wordarray_map_view :: "'a WordArray View \<times> ('a \<Rightarrow> 'a) \<Rightarrow> 'a WordArray View"

consts wordarray_unview :: "'a WordArray View \<Rightarrow> 'a WordArray"

consts wordarray_view :: "'a WordArray \<times> 32 word \<times> 32 word \<times> 32 word \<Rightarrow> 'a WordArray View"

consts vfs_stat_set_blksize :: " VfsStat \<times> 32 word \<Rightarrow>  VfsStat"

consts vfs_stat_set_blocks :: " VfsStat \<times> 64 word \<Rightarrow>  VfsStat"

consts vfs_stat_set_gid :: " VfsStat \<times> 32 word \<Rightarrow>  VfsStat"

consts vfs_stat_set_nlink :: " VfsStat \<times> 32 word \<Rightarrow>  VfsStat"

consts vfs_stat_set_uid :: " VfsStat \<times> 32 word \<Rightarrow>  VfsStat"

consts vfs_stat_set_size :: " VfsStat \<times> 64 word \<Rightarrow>  VfsStat"

consts vfs_stat_set_mode :: " VfsStat \<times> 32 word \<Rightarrow>  VfsStat"

consts vfs_stat_set_ino :: " VfsStat \<times> 32 word \<Rightarrow>  VfsStat"

consts vfs_iattr_get_gid :: " VfsIattr \<Rightarrow> 32 word"

consts vfs_iattr_get_mode :: " VfsIattr \<Rightarrow> 32 word"

consts vfs_iattr_get_size :: " VfsIattr \<Rightarrow> 64 word"

consts vfs_iattr_get_uid :: " VfsIattr \<Rightarrow> 32 word"

consts vfs_iattr_get_valid :: " VfsIattr \<Rightarrow> 32 word"

consts vfs_stat_set_flags :: " VfsStat \<times> 32 word \<Rightarrow>  VfsStat"

consts vfs_create_device :: "32 word \<times> 32 word \<Rightarrow>  VfsDevice"

consts vfs_device_inspect :: " VfsDevice \<Rightarrow> 32 word \<times> 32 word"

consts wubi_vol_cdev :: " UbiVolInfo \<Rightarrow> 32 word"

consts wubi_vol_size :: " UbiVolInfo \<Rightarrow> 32 word"

consts wubi_vol_usable_leb_size :: " UbiVolInfo \<Rightarrow> 32 word"

consts wubi_get_vol_info :: " UbiVol \<times>  UbiVolInfo \<Rightarrow>  UbiVolInfo"

consts wubi_vol_ubi_num :: " UbiVolInfo \<Rightarrow> 32 word"

consts wubi_vol_vol_id :: " UbiVolInfo \<Rightarrow> 32 word"

consts wubi_dev_max_write_size :: " UbiDevInfo \<Rightarrow> 32 word"

consts wubi_dev_min_io_size :: " UbiDevInfo \<Rightarrow> 32 word"

consts freeUbiDevInfo :: " SysState \<times>  UbiDevInfo \<Rightarrow>  SysState"

consts freeUbiVolInfo :: " SysState \<times>  UbiVolInfo \<Rightarrow>  SysState"

consts os_get_current_fsgid :: " SysState \<Rightarrow> 32 word"

consts os_get_current_fsuid :: " SysState \<Rightarrow> 32 word"

consts os_get_pid :: " SysState \<Rightarrow> 32 word"

consts wordarray_free :: " SysState \<times> 'a WordArray \<Rightarrow>  SysState"

consts wubi_close :: " SysState \<times>  UbiVol \<Rightarrow>  SysState"

consts os_spin_lock :: " SysState \<times>  SpinLock \<Rightarrow>  SysState \<times>  SpinLock"

consts os_spin_unlock :: " SysState \<times>  SpinLock \<Rightarrow>  SysState \<times>  SpinLock"

consts seq32_simple :: "(32 word, 32 word, 32 word, 'acc \<Rightarrow> 'acc, 'acc) Seq32SimpleParam \<Rightarrow> 'acc"

consts freeRbtNode :: " SysState \<times> ('k, 'v) RbtNode \<Rightarrow>  SysState"

consts rbtnode_get_key :: "('k, 'v) RbtNode \<Rightarrow> 'k"

consts rbtnode_get_val :: "('k, 'v) RbtNode \<Rightarrow> 'v"

consts rbtnode_put_key :: "('k, 'v) RbtNode \<times> 'k \<Rightarrow> ('k, 'v) RbtNode"

consts rbtnode_put_val :: "('k, 'v) RbtNode \<times> 'v \<Rightarrow> ('k, 'v) RbtNode"

consts rbt_free :: " SysState \<times> ('k, 'v) Rbt \<Rightarrow>  SysState"

consts wordarray_clone_rr :: " SysState \<times> 'a WordArray \<Rightarrow>  SysState \<times> (unit, 'b WordArray) R"

consts wordarray_slice :: " SysState \<times> 'a WordArray \<times> 32 word \<times> 32 word \<Rightarrow>  SysState \<times> (unit, 'a WordArray) R"

consts rbt_create :: " SysState \<Rightarrow> ( SysState,  SysState \<times> ('k, 'v) Rbt) R"

consts newRbtNode :: " SysState \<Rightarrow> ( SysState,  SysState \<times> ('k, 'v) RbtNode) R"

consts newUbiDevInfo :: " SysState \<Rightarrow> ( SysState,  SysState \<times>  UbiDevInfo) R"

consts newUbiVolInfo :: " SysState \<Rightarrow> ( SysState,  SysState \<times>  UbiVolInfo) R"

consts rbt_get_value :: "('k, 'v) Rbt \<times> 'k \<Rightarrow> (unit, 'v) R"

consts rbt_next :: "('k, 'v) Rbt \<times> 'k \<Rightarrow> (unit, 'k) R"

consts wordarray_create :: " SysState \<times> 32 word \<Rightarrow> ( SysState,  SysState \<times> 'a WordArray) R"

consts wordarray_create_nz :: " SysState \<times> 32 word \<Rightarrow> ( SysState,  SysState \<times> 'a WordArray) R"

consts wordarray_put :: "('a WordArray, 32 word, 'a) WordArrayPutP \<Rightarrow> ('a WordArray, 'a WordArray) R"

consts wubi_open_volume :: " WubiOpenVolumeP\<^sub>T \<Rightarrow> ( SysState,  SysState \<times>  UbiVol) R"

consts freeObjSuper :: " SysState \<times>  ObjSuper\<^sub>T \<Rightarrow>  SysState"

consts newObjSuper :: " SysState \<Rightarrow> ( SysState,  SysState \<times>  ObjSuper\<^sub>T) R"

consts freeObjSummary :: " SysState \<times>  ObjSummary\<^sub>T \<Rightarrow>  SysState"

consts newObjSummary :: " SysState \<Rightarrow> ( SysState,  SysState \<times>  ObjSummary\<^sub>T) R"

consts freeObjInode :: " SysState \<times>  ObjInode\<^sub>T \<Rightarrow>  SysState"

consts newObjInode :: " SysState \<Rightarrow> ( SysState,  SysState \<times>  ObjInode\<^sub>T) R"

consts freeObjDentry :: " SysState \<times>  ObjDentry\<^sub>T \<Rightarrow>  SysState"

consts newObjDentry :: " SysState \<Rightarrow> ( SysState,  SysState \<times>  ObjDentry\<^sub>T) R"

consts os_get_current_time :: " SysState \<Rightarrow>  SysState \<times>  OSTimeSpec\<^sub>T"

consts vfs_iattr_get_atime :: " VfsIattr \<Rightarrow>  OSTimeSpec\<^sub>T"

consts vfs_iattr_get_ctime :: " VfsIattr \<Rightarrow>  OSTimeSpec\<^sub>T"

consts vfs_iattr_get_mtime :: " VfsIattr \<Rightarrow>  OSTimeSpec\<^sub>T"

consts vfs_stat_set_atime :: " VfsStat \<times>  OSTimeSpec\<^sub>T \<Rightarrow>  VfsStat"

consts vfs_stat_set_ctime :: " VfsStat \<times>  OSTimeSpec\<^sub>T \<Rightarrow>  VfsStat"

consts vfs_stat_set_mtime :: " VfsStat \<times>  OSTimeSpec\<^sub>T \<Rightarrow>  VfsStat"

consts freeListNode :: " SysState \<times> 'a ListNode \<Rightarrow>  SysState"

consts listnode_get :: "'a ListNode \<Rightarrow> 'a"

consts listnode_put :: "'a ListNode \<times> 'a \<Rightarrow> 'a ListNode"

consts newListNode :: " SysState \<Rightarrow> ( SysState,  SysState \<times> 'a ListNode) R"

consts list_add_node :: "'a ListNode List' \<times> 'a ListNode \<Rightarrow> 'a ListNode List'"

consts list_create :: " SysState \<Rightarrow> ( SysState,  SysState \<times> 'a ListNode List') R"

consts seq32 :: "(32 word, 32 word, 32 word, ('acc, 'obsv, 32 word) Seq32_bodyParam \<Rightarrow> 'acc \<times> ('rbrk, unit) LoopResult, 'acc, 'obsv) Seq32Param \<Rightarrow> 'acc \<times> ('rbrk, unit) LoopResult"

consts seq32_rev :: "(32 word, 32 word, 32 word, ('acc, 'obsv, 32 word) Seq32_bodyParam \<Rightarrow> 'acc \<times> ('rbrk, unit) LoopResult, 'acc, 'obsv) Seq32Param \<Rightarrow> 'acc \<times> ('rbrk, unit) LoopResult"

consts seq32_stepf :: "(32 word, 32 word, 32 word \<Rightarrow> 32 word, ('acc, 'obsv, 32 word) Seq32_bodyParam \<Rightarrow> 'acc \<times> ('rbrk, unit) LoopResult, 'acc, 'obsv) Seq32StepFParam \<Rightarrow> 'acc \<times> ('rbrk, unit) LoopResult"

consts seq64 :: "(64 word, 64 word, 64 word, ('acc, 'obsv, 64 word) Seq32_bodyParam \<Rightarrow> 'acc \<times> ('rbrk, unit) LoopResult, 'acc, 'obsv) Seq32Param \<Rightarrow> 'acc \<times> ('rbrk, unit) LoopResult"

consts idx_to_gim_node :: "(64 word,  ObjAddr\<^sub>T) RbtNode \<Rightarrow> (64 word,  GimNode\<^sub>T) RbtNode"

consts freeFsopState :: " SysState \<times>  FsopState\<^sub>T \<Rightarrow>  SysState"

consts newFsopState :: " SysState \<Rightarrow> ( SysState,  SysState \<times>  FsopState\<^sub>T) R"

consts freeFsmState :: " SysState \<times>  FsmState\<^sub>T \<Rightarrow>  SysState"

consts newFsmState :: " SysState \<Rightarrow> ( SysState,  SysState \<times>  FsmState\<^sub>T) R"

consts freeVfsInode :: " SysState \<times>  VfsInode\<^sub>T \<Rightarrow>  SysState"

consts newVfsInode :: " SysState \<Rightarrow> ( SysState,  SysState \<times>  VfsInode\<^sub>T) R"

consts vfs_inode_bad :: "( SysState,  VfsInode\<^sub>T) T6 \<Rightarrow>  SysState"

consts vfs_inode_bad_taken :: "( SysState,  VfsInode\<^sub>T) T6 \<Rightarrow>  SysState"

consts vfs_inode_dec_nlink :: " VfsInode\<^sub>T \<Rightarrow>  VfsInode\<^sub>T"

consts vfs_inode_get :: " SysState \<times> 32 word \<Rightarrow>  SysState \<times> ( VfsInode\<^sub>T,  VfsInode\<^sub>T, unit) T5"

consts vfs_inode_get_atime :: " VfsInode\<^sub>T \<Rightarrow>  OSTimeSpec\<^sub>T"

consts vfs_inode_get_blocks :: " VfsInode\<^sub>T \<Rightarrow> 64 word"

consts vfs_inode_get_bytes :: " VfsInode\<^sub>T \<Rightarrow> 16 word"

consts vfs_inode_get_ctime :: " VfsInode\<^sub>T \<Rightarrow>  OSTimeSpec\<^sub>T"

consts vfs_inode_get_device :: " VfsInode\<^sub>T \<Rightarrow>  VfsDevice"

consts vfs_inode_get_flags :: " VfsInode\<^sub>T \<Rightarrow> 32 word"

consts vfs_inode_get_gid :: " VfsInode\<^sub>T \<Rightarrow> 32 word"

consts vfs_inode_get_ino :: " VfsInode\<^sub>T \<Rightarrow> 32 word"

consts vfs_inode_get_ino2 :: " VfsInode\<^sub>T \<Rightarrow> 32 word"

consts vfs_inode_get_mapping :: " VfsInode\<^sub>T \<Rightarrow>  VfsMemoryMap"

consts vfs_inode_get_mode :: " VfsInode\<^sub>T \<Rightarrow> 32 word"

consts vfs_inode_get_mode2 :: " VfsInode\<^sub>T \<Rightarrow> 32 word"

consts vfs_inode_get_mtime :: " VfsInode\<^sub>T \<Rightarrow>  OSTimeSpec\<^sub>T"

consts vfs_inode_get_nlink :: " VfsInode\<^sub>T \<Rightarrow> 32 word"

consts vfs_inode_get_size :: " VfsInode\<^sub>T \<Rightarrow> 64 word"

consts vfs_inode_get_uid :: " VfsInode\<^sub>T \<Rightarrow> 32 word"

consts vfs_inode_inc_nlink :: " VfsInode\<^sub>T \<Rightarrow>  VfsInode\<^sub>T"

consts vfs_inode_insert :: "( SysState,  VfsInode\<^sub>T) T6 \<Rightarrow> ( SysState \<times>  VfsInode\<^sub>T,  SysState \<times>  VfsInode\<^sub>T) R"

consts vfs_inode_is_sync :: " VfsInode\<^sub>T \<Rightarrow> bool"

consts vfs_inode_is_sync_dir :: " VfsInode\<^sub>T \<Rightarrow> bool"

consts vfs_inode_link_device :: " VfsInode\<^sub>T \<times> 32 word \<times>  VfsDevice \<Rightarrow>  VfsInode\<^sub>T"

consts vfs_inode_lock :: " VfsInode\<^sub>T \<Rightarrow>  VfsInode\<^sub>T"

consts vfs_inode_make_bad :: " VfsInode\<^sub>T \<Rightarrow>  VfsInode\<^sub>T"

consts vfs_inode_mark_dirty :: " SysState \<times>  VfsInode\<^sub>T \<Rightarrow>  SysState \<times>  VfsInode\<^sub>T"

consts vfs_inode_new :: " SysState \<Rightarrow> ( SysState,  SysState \<times>  VfsInode\<^sub>T) R"

consts vfs_inode_put :: "( SysState,  VfsInode\<^sub>T) T6 \<Rightarrow>  SysState"

consts vfs_inode_put_taken :: "( SysState,  VfsInode\<^sub>T) T6 \<Rightarrow>  SysState"

consts vfs_inode_set_atime :: " VfsInode\<^sub>T \<times>  OSTimeSpec\<^sub>T \<Rightarrow>  VfsInode\<^sub>T"

consts vfs_inode_set_blocks :: " VfsInode\<^sub>T \<times> 64 word \<Rightarrow>  VfsInode\<^sub>T"

consts vfs_inode_set_bytes :: " VfsInode\<^sub>T \<times> 16 word \<Rightarrow>  VfsInode\<^sub>T"

consts vfs_inode_set_ctime :: " VfsInode\<^sub>T \<times>  OSTimeSpec\<^sub>T \<Rightarrow>  VfsInode\<^sub>T"

consts vfs_inode_set_flags :: " VfsInode\<^sub>T \<times> 32 word \<Rightarrow>  VfsInode\<^sub>T"

consts vfs_inode_set_gid :: " VfsInode\<^sub>T \<times> 32 word \<Rightarrow>  VfsInode\<^sub>T"

consts vfs_inode_set_ino :: " VfsInode\<^sub>T \<times> 32 word \<Rightarrow>  VfsInode\<^sub>T"

consts vfs_inode_set_mode :: " VfsInode\<^sub>T \<times> 32 word \<Rightarrow>  VfsInode\<^sub>T"

consts vfs_inode_set_mtime :: " VfsInode\<^sub>T \<times>  OSTimeSpec\<^sub>T \<Rightarrow>  VfsInode\<^sub>T"

consts vfs_inode_set_nlink :: " VfsInode\<^sub>T \<times> 32 word \<Rightarrow>  VfsInode\<^sub>T"

consts vfs_inode_set_size :: " VfsInode\<^sub>T \<times> 64 word \<Rightarrow>  VfsInode\<^sub>T"

consts vfs_inode_set_uid :: " VfsInode\<^sub>T \<times> 32 word \<Rightarrow>  VfsInode\<^sub>T"

consts vfs_inode_sync_metadata :: " VfsInode\<^sub>T \<Rightarrow>  VfsInode\<^sub>T"

consts vfs_inode_unlock :: " VfsInode\<^sub>T \<Rightarrow>  VfsInode\<^sub>T"

consts vfs_inode_unlock_new :: " VfsInode\<^sub>T \<Rightarrow>  VfsInode\<^sub>T"

consts list_free :: "('a ListNode List',  SysState \<times> 'a ListNode \<Rightarrow>  SysState,  SysState) ListFreeP \<Rightarrow>  SysState"

consts wordarray_findsub :: "'a WordArray \<times> 'a WordArray \<times> 32 word \<Rightarrow>  FindResult\<^sub>T"

consts wubi_get_dev_info :: "32 word \<times>  UbiDevInfo \<Rightarrow>  WubiGetDevInfoR\<^sub>T"

consts list_fold :: "('a ListNode List', ('a ListNode, 'acc, 'obsv) ElemAO \<Rightarrow> 'acc, 'acc, 'obsv) ListFoldP \<Rightarrow> 'acc"

consts rbt_cond_erase :: "(('k, 'v) Rbt, 'k, (('k, 'v) RbtNode, 'acc, 'obsv) ElemAO \<Rightarrow> bool, (('k, 'v) RbtNode, 'acc, 'obsv) ElemAO \<Rightarrow> 'acc, 'acc, 'obsv) RbtCondEraseP \<Rightarrow> ('k, 'v) Rbt \<times> 'acc"

consts rbt_filter :: "(('k, 'v) Rbt, 'k, 'k, (('k, 'v) RbtNode, 'acc, 'obsv) ElemAO \<Rightarrow> bool, (('k, 'v) RbtNode, 'acc, 'obsv) ElemAO \<Rightarrow> 'acc, 'acc, 'obsv) RbtFilterP \<Rightarrow> ('k, 'v) Rbt \<times> 'acc"

consts rbt_iterate :: "(('k, 'v) Rbt, 'k, 'k, (('k, 'v) RbtNode, 'acc, 'obsv) ElemAO \<Rightarrow> ('rbrk \<times> ('k, 'v) RbtNode, 'acc \<times> ('k, 'v) RbtNode) LoopResult, 'acc, 'obsv) RbtIterateNoBreakP \<Rightarrow> (('k, 'v) Rbt \<times> 'rbrk, ('k, 'v) Rbt \<times> 'acc) LoopResult"

consts rbt_iterate_no_break :: "(('k, 'v) Rbt, 'k, 'k, (('k, 'v) RbtNode, 'acc, 'obsv) ElemAO \<Rightarrow> 'acc \<times> ('k, 'v) RbtNode, 'acc, 'obsv) RbtIterateNoBreakP \<Rightarrow> ('k, 'v) Rbt \<times> 'acc"

consts rbt_modify :: "(('k, 'v) Rbt, 'k, (('k, 'v) RbtNode, 'acc, 'obsv) ElemAO \<Rightarrow> ('k, 'v) RbtNode \<times> 'acc, ('k, 'v) RbtNode, 'acc, 'obsv) RbtModifyP \<Rightarrow> (('k, 'v) Rbt, (unit, ('k, 'v) RbtNode) Option, 'acc) RbtModifyR"

consts wordarray_fold :: "('a WordArray, 32 word, 32 word, ('a, 'acc, 'obsv) ElemAO \<Rightarrow> ('rbrk, 'acc) LoopResult, 'acc, 'obsv) ArrayMapP \<Rightarrow> ('rbrk, 'acc) LoopResult"

consts wordarray_fold_no_break :: "('a WordArray, 32 word, 32 word, ('a, 'acc, 'obsv) ElemAO \<Rightarrow> 'acc, 'acc, 'obsv) ArrayMapP \<Rightarrow> 'acc"

consts wordarray_map :: "('a WordArray, 32 word, 32 word, ('a, 'acc, 'obsv) ElemAO \<Rightarrow> ('a \<times> 'acc) \<times> ('rbrk, unit) LoopResult, 'acc, 'obsv) ArrayMapP \<Rightarrow> ('a WordArray \<times> 'acc) \<times> ('rbrk, unit) LoopResult"

consts wordarray_map_no_break :: "('a WordArray, 32 word, 32 word, ('a, 'acc, 'obsv) ElemAO \<Rightarrow> 'a \<times> 'acc, 'acc, 'obsv) ArrayMapP \<Rightarrow> 'a WordArray \<times> 'acc"

consts wubi_is_mapped :: " WubiLebEraseP\<^sub>T \<Rightarrow>  SysState \<times> (32 word, bool) R"

consts wubi_leb_erase :: " WubiLebEraseP\<^sub>T \<Rightarrow> ( SysState \<times>  UbiVol) \<times> (32 word, unit) R"

consts vfs_dir_emit :: " VfsDirEmitP\<^sub>T \<Rightarrow> ( VfsDirContext\<^sub>T T4,  VfsDirContext\<^sub>T T4) LoopResult"

consts wubi_open :: " WubiOpenP\<^sub>T \<Rightarrow> ( SysState,  SysState \<times>  UbiVol) R"

consts vfs_page_symlink :: " SysState \<times>  VfsInode\<^sub>T \<times> 8 word WordArray \<Rightarrow> ( SysState \<times>  VfsInode\<^sub>T) \<times> (32 word, unit) R"

consts wordarray_print :: "8 word WordArray \<Rightarrow> unit"

consts crc32_buf :: " Crc32bufP\<^sub>T \<Rightarrow> 32 word"

consts wubi_leb_change :: " WubiLebChangeP\<^sub>T \<Rightarrow> ( SysState \<times>  UbiVol) \<times> (32 word, unit) R"

consts freeBuffer :: " SysState \<times>  Buffer\<^sub>T \<Rightarrow>  SysState"

consts newBuffer :: " SysState \<Rightarrow> ( SysState,  SysState \<times>  Buffer\<^sub>T) R"

consts wubi_leb_read :: " WubiLebReadP\<^sub>T \<Rightarrow> ( SysState \<times>  Buffer\<^sub>T) \<times> (32 word, unit) R"

consts wubi_leb_write :: " WubiLebWriteP\<^sub>T \<Rightarrow> ( SysState \<times>  UbiVol) \<times> (32 word, unit) R"

consts array_fold_no_break :: "('a Array, ('a, 'acc, 'obsv) ElemAO \<Rightarrow> 'acc, 'acc, 'obsv) ArrayFoldP \<Rightarrow> 'acc"

consts array_fold :: "('a Array, ('a, 'acc, 'obsv) ElemAO \<Rightarrow> ('rbrk, 'acc) LoopResult, 'acc, 'obsv) ArrayFoldP \<Rightarrow> ('rbrk, 'acc) LoopResult"

consts array_free :: "('a Array,  SysState \<times> 'a \<Rightarrow>  SysState,  SysState) ArrayFreeP \<Rightarrow>  SysState"

consts array_use_maybe_value :: "('a Array, 32 word, ((unit, 'a) Option, 'acc, 'obsv) OptElemAO \<Rightarrow> 'acc, 'acc, 'obsv) ArrayUseValueP \<Rightarrow> 'acc"

consts array_use_value :: "('a Array, 32 word, ('a, 'acc, 'obsv) ElemAO \<Rightarrow> 'acc, 'acc, 'obsv) ArrayUseValueP \<Rightarrow> 'acc"

consts freeBilbyFsReaddirContext :: " SysState \<times>  BilbyFsReaddirContext\<^sub>T \<Rightarrow>  SysState"

consts newBilbyFsReaddirContext :: " SysState \<Rightarrow> ( SysState,  SysState \<times>  BilbyFsReaddirContext\<^sub>T) R"

consts freeMountState :: " SysState \<times>  MountState\<^sub>T \<Rightarrow>  SysState"

consts newMountState :: " SysState \<Rightarrow> ( SysState,  SysState \<times>  MountState\<^sub>T) R"

consts freeObj :: " SysState \<times>  Obj\<^sub>T \<Rightarrow>  SysState"

consts newObj :: " SysState \<Rightarrow> ( SysState,  SysState \<times>  Obj\<^sub>T) R"

consts freeObjDentarr :: " SysState \<times>  ObjDentarr\<^sub>T \<Rightarrow>  SysState"

consts newObjDentarr :: " SysState \<Rightarrow> ( SysState,  SysState \<times>  ObjDentarr\<^sub>T) R"

consts array_create :: " SysState \<times> 32 word \<Rightarrow> ( SysState,  SysState \<times> 'a Array) R"

consts array_exists :: "'a Array \<times> 32 word \<Rightarrow> bool"

consts array_filter :: "('a Array, ('a, 'acc, 'obsv) ElemAO \<Rightarrow> 'acc \<times> ('a, unit) R, 'acc, 'obsv) ArrayFoldP \<Rightarrow> ('a Array, 'acc) ArrA"

consts array_length :: "'a Array \<Rightarrow> 32 word"

consts array_map :: "('a Array, 32 word, 32 word, ((unit, 'a) Option, 'acc, 'obsv) OptElemAO \<Rightarrow> ((unit, 'a) Option \<times> 'rbrk, (unit, 'a) Option \<times> 'acc) LoopResult, 'acc, 'obsv) ArrayMapP \<Rightarrow> ('a Array \<times> 'rbrk, 'a Array \<times> 'acc) LoopResult"

consts array_map_no_break :: "('a Array, 32 word, 32 word, ((unit, 'a) Option, 'acc, 'obsv) OptElemAO \<Rightarrow> (unit, 'a) Option \<times> 'acc, 'acc, 'obsv) ArrayMapP \<Rightarrow> 'a Array \<times> 'acc"

consts array_nb_elem :: "'a Array \<Rightarrow> 32 word"

consts array_remove :: "'a Array \<times> 32 word \<Rightarrow> 'a Array \<times> (unit, 'a) Option"

consts array_replace :: "('a Array, 32 word, 'a,  SysState \<times> 'a \<Rightarrow>  SysState,  SysState) ArrayReplaceP \<Rightarrow> ( SysState \<times> 'a Array) \<times> (unit, unit) R"

consts arrayobj_create1 :: " SysState \<times>  Obj\<^sub>T \<Rightarrow> ( SysState,  SysState \<times>  Obj\<^sub>T Array) R"

consts arrayobj_create3 :: " SysState \<times>  Obj\<^sub>T \<times>  Obj\<^sub>T \<times>  Obj\<^sub>T \<Rightarrow> ( SysState,  SysState \<times>  Obj\<^sub>T Array) R"

consts arrayobj_create4 :: " SysState \<times>  Obj\<^sub>T \<times>  Obj\<^sub>T \<times>  Obj\<^sub>T \<times>  Obj\<^sub>T \<Rightarrow> ( SysState,  SysState \<times>  Obj\<^sub>T Array) R"

consts arrayobj_create4_ret2 :: " SysState \<times>  Obj\<^sub>T \<times>  Obj\<^sub>T \<times>  Obj\<^sub>T \<times>  Obj\<^sub>T \<Rightarrow> ( SysState \<times>  Obj\<^sub>T,  SysState \<times>  Obj\<^sub>T Array) R"

consts arrayobj_create5 :: " SysState \<times>  Obj\<^sub>T \<times>  Obj\<^sub>T \<times>  Obj\<^sub>T \<times>  Obj\<^sub>T \<times>  Obj\<^sub>T \<Rightarrow> ( SysState,  SysState \<times>  Obj\<^sub>T Array) R"

consts arrayobj_create6 :: " SysState \<times>  Obj\<^sub>T \<times>  Obj\<^sub>T \<times>  Obj\<^sub>T \<times>  Obj\<^sub>T \<times>  Obj\<^sub>T \<times>  Obj\<^sub>T \<Rightarrow> ( SysState,  SysState \<times>  Obj\<^sub>T Array) R"

consts array_map_ex :: "('a Array, 32 word, 32 word, ('a, 'acc, 'obsv) ElemAO \<Rightarrow> (('a, 'rbrk) ElemB, ('a, 'acc) ElemA) LoopResult, 'acc, 'obsv) ArrayMapP \<Rightarrow> (('a Array, 'rbrk) ArrB, ('a Array, 'acc) ArrA) LoopResult"

consts array_modify :: "('a Array, 32 word, ((unit, 'a) Option, 'acc) OptElemA \<Rightarrow> ((unit, 'a) Option, 'acc) OptElemA, 'acc) ArrayModifyP \<Rightarrow> ('a Array, 'acc) ArrA"

consts wordarray_modify :: "('a WordArray, 32 word, ('a, 'acc, 'obsv) ElemAO \<Rightarrow> ('a, 'acc) ElemA, 'acc, 'obsv) ArrayUseValueP \<Rightarrow> ('a WordArray, 'acc) ArrA"

consts freeFsState :: " SysState \<times>  FsState'Taken\<^sub>T \<Rightarrow>  SysState"

consts newFsState :: " SysState \<Rightarrow> ( SysState,  SysState \<times>  FsState'Taken\<^sub>T) R"

consts freeFsState2 :: " SysState \<times>  FsState'Taken\<^sub>T \<Rightarrow>  SysState"

consts freeOstoreState :: " SysState \<times>  OstoreState\<^sub>T \<Rightarrow>  SysState"

consts newOstoreState :: " SysState \<Rightarrow> ( SysState,  SysState \<times>  OstoreState\<^sub>T) R"

consts allocpool_clean :: " SysState \<times> 'a AllocPool \<Rightarrow>  SysState \<times> 'a AllocPool"

consts allocpool_create :: " SysState \<Rightarrow> ( SysState,  SysState \<times> 'a AllocPool) R"

consts allocpool_free :: " SysState \<times> 'a AllocPool \<Rightarrow>  SysState"

consts allocpool_prealloc :: "( SysState, 'a AllocPool, 32 word) AllocPoolPreallocP \<Rightarrow> ( SysState \<times> 'a AllocPool) \<times> (unit, unit) R"

consts allocpool_use :: "('a AllocPool, ('a, 'acc, 'obsv) ElemAO \<Rightarrow> 'acc, 'acc, 'obsv) AllocPoolUseP \<Rightarrow> 'a AllocPool \<times> 'acc"

end
