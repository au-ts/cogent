(*
This file is generated by Cogent

*)

theory Generated_SCorres_Normal
imports "Generated_Shallow_Normal"
"Generated_Deep_Normal"
"CogentShallow.Shallow_Tac"
begin

overloading
  valRel_T0 \<equiv> valRel
begin
  definition valRel_T0: "\<And>\<xi> x v. valRel_T0 \<xi> (x :: ('t_p1, 't_p2) T0) v \<equiv> \<exists>f_p1 f_p2. v = VRecord [f_p1, f_p2] \<and> valRel \<xi> (T0.p1\<^sub>f x) f_p1 \<and> valRel \<xi> (T0.p2\<^sub>f x) f_p2"
end

overloading
  valRel_WordArrayMapNoBreakP \<equiv> valRel
begin
  definition valRel_WordArrayMapNoBreakP: "\<And>\<xi> x v. valRel_WordArrayMapNoBreakP \<xi> (x :: ('t_arr, 't_frm, 't_to, 't_f, 't_acc, 't_obsv) WordArrayMapNoBreakP) v \<equiv> \<exists>f_arr f_frm f_to f_f f_acc f_obsv. v = VRecord [f_arr, f_frm, f_to, f_f, f_acc, f_obsv] \<and> valRel \<xi> (WordArrayMapNoBreakP.arr\<^sub>f x) f_arr \<and> valRel \<xi> (WordArrayMapNoBreakP.frm\<^sub>f x) f_frm \<and> valRel \<xi> (WordArrayMapNoBreakP.to\<^sub>f x) f_to \<and> valRel \<xi> (WordArrayMapNoBreakP.f\<^sub>f x) f_f \<and> valRel \<xi> (WordArrayMapNoBreakP.acc\<^sub>f x) f_acc \<and> valRel \<xi> (WordArrayMapNoBreakP.obsv\<^sub>f x) f_obsv"
end

overloading
  valRel_ElemAO \<equiv> valRel
begin
  definition valRel_ElemAO: "\<And>\<xi> x v. valRel_ElemAO \<xi> (x :: ('t_elem, 't_acc, 't_obsv) ElemAO) v \<equiv> \<exists>f_elem f_acc f_obsv. v = VRecord [f_elem, f_acc, f_obsv] \<and> valRel \<xi> (ElemAO.elem\<^sub>f x) f_elem \<and> valRel \<xi> (ElemAO.acc\<^sub>f x) f_acc \<and> valRel \<xi> (ElemAO.obsv\<^sub>f x) f_obsv"
end

overloading
  valRel_WordArrayPutP \<equiv> valRel
begin
  definition valRel_WordArrayPutP: "\<And>\<xi> x v. valRel_WordArrayPutP \<xi> (x :: ('t_arr, 't_idx, 't_val) WordArrayPutP) v \<equiv> \<exists>f_arr f_idx f_val. v = VRecord [f_arr, f_idx, f_val] \<and> valRel \<xi> (WordArrayPutP.arr\<^sub>f x) f_arr \<and> valRel \<xi> (WordArrayPutP.idx\<^sub>f x) f_idx \<and> valRel \<xi> (WordArrayPutP.val\<^sub>f x) f_val"
end

lemmas valRel_records =
  valRel_T0
  T0.defs
  valRel_WordArrayMapNoBreakP
  WordArrayMapNoBreakP.defs
  valRel_ElemAO
  ElemAO.defs
  valRel_WordArrayPutP
  WordArrayPutP.defs

context shallow begin

lemma scorres_struct_T0 :
  "\<And>\<gamma> \<xi> s_p1 s_p2 d_p1 d_p2.
  scorres s_p1 d_p1 \<gamma> \<xi> \<Longrightarrow>
  scorres s_p2 d_p2 \<gamma> \<xi> \<Longrightarrow>
  scorres (T0.make s_p1 s_p2) (Struct ts [d_p1, d_p2]) \<gamma> \<xi>"
  apply (clarsimp simp: scorres_def valRel_T0 T0.defs elim!: v_sem_elims)
  done

lemma scorres_struct_WordArrayMapNoBreakP :
  "\<And>\<gamma> \<xi> s_arr s_frm s_to s_f s_acc s_obsv d_arr d_frm d_to d_f d_acc d_obsv.
  scorres s_arr d_arr \<gamma> \<xi> \<Longrightarrow>
  scorres s_frm d_frm \<gamma> \<xi> \<Longrightarrow>
  scorres s_to d_to \<gamma> \<xi> \<Longrightarrow>
  scorres s_f d_f \<gamma> \<xi> \<Longrightarrow>
  scorres s_acc d_acc \<gamma> \<xi> \<Longrightarrow>
  scorres s_obsv d_obsv \<gamma> \<xi> \<Longrightarrow>
  scorres (WordArrayMapNoBreakP.make s_arr s_frm s_to s_f s_acc s_obsv) (Struct ts [d_arr, d_frm, d_to, d_f, d_acc, d_obsv]) \<gamma> \<xi>"
  apply (clarsimp simp: scorres_def valRel_WordArrayMapNoBreakP WordArrayMapNoBreakP.defs elim!: v_sem_elims)
  done

lemma scorres_struct_ElemAO :
  "\<And>\<gamma> \<xi> s_elem s_acc s_obsv d_elem d_acc d_obsv.
  scorres s_elem d_elem \<gamma> \<xi> \<Longrightarrow>
  scorres s_acc d_acc \<gamma> \<xi> \<Longrightarrow>
  scorres s_obsv d_obsv \<gamma> \<xi> \<Longrightarrow>
  scorres (ElemAO.make s_elem s_acc s_obsv) (Struct ts [d_elem, d_acc, d_obsv]) \<gamma> \<xi>"
  apply (clarsimp simp: scorres_def valRel_ElemAO ElemAO.defs elim!: v_sem_elims)
  done

lemma scorres_struct_WordArrayPutP :
  "\<And>\<gamma> \<xi> s_arr s_idx s_val d_arr d_idx d_val.
  scorres s_arr d_arr \<gamma> \<xi> \<Longrightarrow>
  scorres s_idx d_idx \<gamma> \<xi> \<Longrightarrow>
  scorres s_val d_val \<gamma> \<xi> \<Longrightarrow>
  scorres (WordArrayPutP.make s_arr s_idx s_val) (Struct ts [d_arr, d_idx, d_val]) \<gamma> \<xi>"
  apply (clarsimp simp: scorres_def valRel_WordArrayPutP WordArrayPutP.defs elim!: v_sem_elims)
  done

lemmas scorres_structs =
  scorres_struct_T0
  scorres_struct_WordArrayMapNoBreakP
  scorres_struct_ElemAO
  scorres_struct_WordArrayPutP

lemma shallow_tac_rec_field_T0__p1 :
  "shallow_tac_rec_field \<xi> (T0.p1\<^sub>f :: ('t_p1, 't_p2) T0 \<Rightarrow> 't_p1) T0.p1\<^sub>f_update 0"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_T0)
  done

lemma shallow_tac_rec_field_T0__p2 :
  "shallow_tac_rec_field \<xi> (T0.p2\<^sub>f :: ('t_p1, 't_p2) T0 \<Rightarrow> 't_p2) T0.p2\<^sub>f_update 1"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_T0)
  done

lemma shallow_tac_rec_field_WordArrayMapNoBreakP__arr :
  "shallow_tac_rec_field \<xi> (WordArrayMapNoBreakP.arr\<^sub>f :: ('t_arr, 't_frm, 't_to, 't_f, 't_acc, 't_obsv) WordArrayMapNoBreakP \<Rightarrow> 't_arr) WordArrayMapNoBreakP.arr\<^sub>f_update 0"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_WordArrayMapNoBreakP)
  done

lemma shallow_tac_rec_field_WordArrayMapNoBreakP__frm :
  "shallow_tac_rec_field \<xi> (WordArrayMapNoBreakP.frm\<^sub>f :: ('t_arr, 't_frm, 't_to, 't_f, 't_acc, 't_obsv) WordArrayMapNoBreakP \<Rightarrow> 't_frm) WordArrayMapNoBreakP.frm\<^sub>f_update 1"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_WordArrayMapNoBreakP)
  done

lemma shallow_tac_rec_field_WordArrayMapNoBreakP__to :
  "shallow_tac_rec_field \<xi> (WordArrayMapNoBreakP.to\<^sub>f :: ('t_arr, 't_frm, 't_to, 't_f, 't_acc, 't_obsv) WordArrayMapNoBreakP \<Rightarrow> 't_to) WordArrayMapNoBreakP.to\<^sub>f_update 2"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_WordArrayMapNoBreakP)
  done

lemma shallow_tac_rec_field_WordArrayMapNoBreakP__f :
  "shallow_tac_rec_field \<xi> (WordArrayMapNoBreakP.f\<^sub>f :: ('t_arr, 't_frm, 't_to, 't_f, 't_acc, 't_obsv) WordArrayMapNoBreakP \<Rightarrow> 't_f) WordArrayMapNoBreakP.f\<^sub>f_update 3"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_WordArrayMapNoBreakP)
  done

lemma shallow_tac_rec_field_WordArrayMapNoBreakP__acc :
  "shallow_tac_rec_field \<xi> (WordArrayMapNoBreakP.acc\<^sub>f :: ('t_arr, 't_frm, 't_to, 't_f, 't_acc, 't_obsv) WordArrayMapNoBreakP \<Rightarrow> 't_acc) WordArrayMapNoBreakP.acc\<^sub>f_update 4"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_WordArrayMapNoBreakP)
  done

lemma shallow_tac_rec_field_WordArrayMapNoBreakP__obsv :
  "shallow_tac_rec_field \<xi> (WordArrayMapNoBreakP.obsv\<^sub>f :: ('t_arr, 't_frm, 't_to, 't_f, 't_acc, 't_obsv) WordArrayMapNoBreakP \<Rightarrow> 't_obsv) WordArrayMapNoBreakP.obsv\<^sub>f_update 5"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_WordArrayMapNoBreakP)
  done

lemma shallow_tac_rec_field_ElemAO__elem :
  "shallow_tac_rec_field \<xi> (ElemAO.elem\<^sub>f :: ('t_elem, 't_acc, 't_obsv) ElemAO \<Rightarrow> 't_elem) ElemAO.elem\<^sub>f_update 0"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_ElemAO)
  done

lemma shallow_tac_rec_field_ElemAO__acc :
  "shallow_tac_rec_field \<xi> (ElemAO.acc\<^sub>f :: ('t_elem, 't_acc, 't_obsv) ElemAO \<Rightarrow> 't_acc) ElemAO.acc\<^sub>f_update 1"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_ElemAO)
  done

lemma shallow_tac_rec_field_ElemAO__obsv :
  "shallow_tac_rec_field \<xi> (ElemAO.obsv\<^sub>f :: ('t_elem, 't_acc, 't_obsv) ElemAO \<Rightarrow> 't_obsv) ElemAO.obsv\<^sub>f_update 2"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_ElemAO)
  done

lemma shallow_tac_rec_field_WordArrayPutP__arr :
  "shallow_tac_rec_field \<xi> (WordArrayPutP.arr\<^sub>f :: ('t_arr, 't_idx, 't_val) WordArrayPutP \<Rightarrow> 't_arr) WordArrayPutP.arr\<^sub>f_update 0"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_WordArrayPutP)
  done

lemma shallow_tac_rec_field_WordArrayPutP__idx :
  "shallow_tac_rec_field \<xi> (WordArrayPutP.idx\<^sub>f :: ('t_arr, 't_idx, 't_val) WordArrayPutP \<Rightarrow> 't_idx) WordArrayPutP.idx\<^sub>f_update 1"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_WordArrayPutP)
  done

lemma shallow_tac_rec_field_WordArrayPutP__val :
  "shallow_tac_rec_field \<xi> (WordArrayPutP.val\<^sub>f :: ('t_arr, 't_idx, 't_val) WordArrayPutP \<Rightarrow> 't_val) WordArrayPutP.val\<^sub>f_update 2"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_WordArrayPutP)
  done

lemmas scorres_rec_fields =
  shallow_tac_rec_field_T0__p1
  shallow_tac_rec_field_T0__p2
  shallow_tac_rec_field_WordArrayMapNoBreakP__arr
  shallow_tac_rec_field_WordArrayMapNoBreakP__frm
  shallow_tac_rec_field_WordArrayMapNoBreakP__to
  shallow_tac_rec_field_WordArrayMapNoBreakP__f
  shallow_tac_rec_field_WordArrayMapNoBreakP__acc
  shallow_tac_rec_field_WordArrayMapNoBreakP__obsv
  shallow_tac_rec_field_ElemAO__elem
  shallow_tac_rec_field_ElemAO__acc
  shallow_tac_rec_field_ElemAO__obsv
  shallow_tac_rec_field_WordArrayPutP__arr
  shallow_tac_rec_field_WordArrayPutP__idx
  shallow_tac_rec_field_WordArrayPutP__val

local_setup \<open>
gen_scorres_lemmas "Generated_ShallowShared" "Generated_Shallow_Normal" "Generated_Deep_Normal" Cogent_abstract_functions Cogent_functions
\<close>


end

end
