(*
This file is generated by Cogent

*)

theory Generated_ShallowShared_Tuples
imports "Cogent.Util"
"CogentShallow.ShallowUtil"
begin

typedecl 'a WordArray

datatype ('a, 'b) Opt =
  Nothing "'a"|
  Something "'b"

record ('a, 'b, 'c, 'd, 'e) RepParam =
  n\<^sub>f :: "'a"
  stop\<^sub>f :: "'b"
  step\<^sub>f :: "'c"
  acc\<^sub>f :: "'d"
  obsv\<^sub>f :: "'e"

record ('a, 'b) StepParam =
  acc\<^sub>f :: "'a"
  obsv\<^sub>f :: "'b"

record ('a, 'b, 'c) WordArrayGetP =
  arr\<^sub>f :: "'a"
  idx\<^sub>f :: "'b"
  val\<^sub>f :: "'c"

record ('a, 'b) WordArrayGetOP =
  arr\<^sub>f :: "'a"
  idx\<^sub>f :: "'b"

type_synonym 'a WordArrayGetOP\<^sub>T = "('a WordArray, 32 word) WordArrayGetOP"

type_synonym 'a WordArrayGetP\<^sub>T = "('a WordArray, 32 word, 'a) WordArrayGetP"

type_synonym 'a WordArrayPutP\<^sub>T = "('a WordArray, 32 word, 'a) WordArrayGetP"

type_synonym ('acc, 'obsv) StepParam\<^sub>T = "('acc, 'obsv) StepParam"

type_synonym ('acc, 'obsv) StopF = "('acc, 'obsv) StepParam\<^sub>T \<Rightarrow> bool"

type_synonym ('acc, 'obsv) StepF = "('acc, 'obsv) StepParam\<^sub>T \<Rightarrow> 'acc"

type_synonym ('acc, 'obsv) RepParam\<^sub>T = "(64 word, ('acc, 'obsv) StopF, ('acc, 'obsv) StepF, 'acc, 'obsv) RepParam"

type_synonym 'a Opt\<^sub>T = "(unit, 'a) Opt"

consts wordarray_get :: "'a WordArrayGetP\<^sub>T \<Rightarrow> 'a"

consts wordarray_length :: "'a WordArray \<Rightarrow> 32 word"

consts wordarray_put :: "'a WordArrayPutP\<^sub>T \<Rightarrow> 'a WordArray"

consts repeat :: "('acc, 'obsv) RepParam\<^sub>T \<Rightarrow> 'acc"

consts wordarray_get_opt :: "'a WordArrayGetOP\<^sub>T \<Rightarrow> 'a Opt\<^sub>T"

end
