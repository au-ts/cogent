type R = { f1 : Bool, f2 : U2, f3 : U4 }

layout L = record { f1 : 1b, f2 : 2b at 1b, f3 : 4b at 4b }
-- NOTE that the first bit is the least significant bit in a byte

foo : R layout L -> R layout L
foo r = if r.f1 !r then
          let r {f3 = v} = r
          and v = upcast v .&. 0x0c
           in r {f3 = truncate v}
        else
          let r {f2 = u} = r
          and u = upcast u + 1
           in r {f2 = truncate u}
