type A
type Arr = A[3]

bar : Arr -> (Arr @take (1), A)
bar arr = let arr' @{ @1 = v } = arr
           in (arr',v)

quux : (Arr @take (1), A) -> Arr
quux (arr,v) = arr @{ @1 = v }
                
{-
foo : (Arr, A, U32) -> (Arr, A)
foo (arr, a, x) = let arr' @{ @x = a' } = arr
                  and arr'' = arr' @{ @x = a }
                   in (arr'', a')
-}
