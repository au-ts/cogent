layout L = record { f1: 1B at 1B, f2: 1b at 0B }
type R = { f1: U8, f2: Bool } layout L

-- boxed array of boxed records
type R4 = R[4] layout array [pointer]
fbb : R4 -> (R4 @take (1), R take (f1), U8)
fbb a = let a' @{ @1 = v } = a
        and v' { f1 = u } = v
         in (a', v', u)

-- unboxed array of boxed records
type R4' = R#[4]
fub : R4'! -> U8
fub a = let v = (a : R4'!)@1
        and u = v.f1 !v
         in u

-- unboxed array of unboxed records
type R4'' = (#R)#[4]
fuu : R4''! -> U8
fuu a = let v = (a : R4''!)@1
        and u = v.f1
         in u

-- boxed array of unboxed records
type B = { f1: U8, f2: Bool, f3: U16 }
type B4 = (#B)[4] layout array [record { f2: 1b at 49b, f1: 1B at 2b, f3: 2B at 17b }]
fbu : B4! -> U8
fbu a = let v = (a : B4!)@1
        and u = v.f1
         in u
